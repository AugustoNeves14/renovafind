{'role': 'assistant', 'content': 'Now let\'s create the navbar component:\n\n<function_calls>\n<create-file file_path="angocine/frontend/angocine/src/app/components/navbar/navbar.component.ts">\nimport { Component, OnInit, HostListener } from \'@angular/core\';\nimport { Router } from \'@angular/router\';\nimport { FormControl } from \'@angular/forms\';\nimport { debounceTime, distinctUntilChanged, switchMap, tap, filter } from \'rxjs/operators\';\nimport { Observable, of } from \'rxjs\';\nimport { AuthService } from \'../../services/auth.service\';\nimport { ThemeService } from \'../../services/theme.service\';\nimport { MovieService } from \'../../services/movie.service\';\nimport { Movie } from \'../../models/movie.model\';\nimport { User, Profile } from \'../../models/user.model\';\n\n@Component({\n  selector: \'app-navbar\',\n  templateUrl: \'./navbar.component.html\',\n  styleUrls: [\'./navbar.component.scss\']\n})\nexport class NavbarComponent implements OnInit {\n  isScrolled = false;\n  isMenuCollapsed = true;\n  searchControl = new FormControl(\'\');\n  searchResults: Movie[] = [];\n  isSearching = false;\n  showSearchResults = false;\n  currentUser: User | null = null;\n  currentProfile: Profile | null = null;\n  isDarkMode = false;\n  \n  @HostListener(\'window:scroll\')\n  onWindowScroll() {\n    this.isScrolled = window.scrollY > 50;\n  }\n  \n  @HostListener(\'document:click\', [\'$event\'])\n  onDocumentClick(event: MouseEvent) {\n    const target = event.target as HTMLElement;\n    if (!target.closest(\'.search-container\')) {\n      this.showSearchResults = false;\n    }\n  }\n  \n  constructor(\n    private router: Router,\n    private authService: AuthService,\n    private themeService: ThemeService,\n    private movieService: MovieService\n  ) {}\n  \n  ngOnInit(): void {\n    // Subscribe to auth service to get current user\n    this.authService.currentUser$.subscribe(user => {\n      this.currentUser = user;\n    });\n    \n    // Subscribe to auth service to get current profile\n    this.authService.currentProfile$.subscribe(profile => {\n      this.currentProfile = profile;\n    });\n    \n    // Subscribe to theme service to get dark mode state\n    this.themeService.darkMode$.subscribe(isDark => {\n      this.isDarkMode = isDark;\n    });\n    \n    // Setup search with debounce\n    this.searchControl.valueChanges.pipe(\n      debounceTime(300),\n      distinctUntilChanged(),\n      filter(value => !!value && value.length >= 2),\n      tap(() => {\n        this.isSearching = true;\n        this.showSearchResults = true;\n      }),\n      switchMap(value => {\n        if (value && value.length >= 2) {\n          return this.movieService.searchMovies(value);\n        }\n        return of({ error: false, data: { movies: [] } });\n      })\n    ).subscribe(response => {\n      this.searchResults = response.data.movies;\n      this.isSearching = false;\n    });\n  }\n  \n  toggleDarkMode(): void {\n    this.themeService.toggleDarkMode();\n  }\n  \n  logout(): void {\n    this.authService.logout();\n    this.router.navigate([\'/\']);\n  }\n  \n  onSearch(event: Event): void {\n    event.preventDefault();\n    const searchTerm = this.searchControl.value;\n    if (searchTerm && searchTerm.trim()) {\n      this.router.navigate([\'/search\'], { queryParams: { q: searchTerm } });\n      this.searchControl.setValue(\'\');\n      this.showSearchResults = false;\n    }\n  }\n  \n  selectSearchResult(movie: Movie): void {\n    this.router.navigate([\'/movie\', movie.id]);\n    this.searchControl.setValue(\'\');\n    this.showSearchResults = false;\n  }\n  \n  switchProfile(profile: Profile): void {\n    this.authService.setCurrentProfile(profile);\n  }\n}\n</create-file>\n</function_calls>'}