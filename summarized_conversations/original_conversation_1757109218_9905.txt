{'role': 'assistant', 'content': 'Let\'s create the user service:\n\n<function_calls>\n<create-file file_path="angocine/frontend/angocine/src/app/services/user.service.ts">\nimport { Injectable } from \'@angular/core\';\nimport { HttpClient, HttpParams } from \'@angular/common/http\';\nimport { Observable } from \'rxjs\';\nimport { Profile } from \'../models/user.model\';\nimport { WatchHistoryItem, WatchlistItem } from \'../models/movie.model\';\nimport { environment } from \'../../environments/environment\';\n\n@Injectable({\n  providedIn: \'root\'\n})\nexport class UserService {\n  private apiUrl = `${environment.apiUrl}/user`;\n  \n  constructor(private http: HttpClient) { }\n  \n  // Get user profile\n  getProfile(): Observable<{ \n    error: boolean, \n    data: { \n      user: any, \n      profiles: Profile[], \n      stats: { \n        watchlist_count: number, \n        history_count: number \n      } \n    } \n  }> {\n    return this.http.get<any>(`${this.apiUrl}/profile`);\n  }\n  \n  // Update user profile\n  updateProfile(data: { \n    username?: string, \n    email?: string, \n    current_password?: string, \n    new_password?: string \n  }): Observable<{ error: boolean, message: string }> {\n    return this.http.put<{ error: boolean, message: string }>(`${this.apiUrl}/profile`, data);\n  }\n  \n  // Get user profiles\n  getProfiles(): Observable<{ error: boolean, data: { profiles: Profile[] } }> {\n    return this.http.get<{ error: boolean, data: { profiles: Profile[] } }>(`${this.apiUrl}/profiles`);\n  }\n  \n  // Create new profile\n  createProfile(name: string, avatar?: string, is_kid?: boolean): Observable<{ \n    error: boolean, \n    message: string, \n    data: { profile: Profile } \n  }> {\n    return this.http.post<any>(`${this.apiUrl}/profiles`, { name, avatar, is_kid });\n  }\n  \n  // Update profile\n  updateProfile(profileId: number, data: { \n    name?: string, \n    avatar?: string, \n    is_kid?: boolean \n  }): Observable<{ error: boolean, message: string, data: { profile: Profile } }> {\n    return this.http.put<any>(`${this.apiUrl}/profiles/${profileId}`, data);\n  }\n  \n  // Delete profile\n  deleteProfile(profileId: number): Observable<{ error: boolean, message: string }> {\n    return this.http.delete<{ error: boolean, message: string }>(`${this.apiUrl}/profiles/${profileId}`);\n  }\n  \n  // Get user watchlist\n  getWatchlist(page: number = 1, limit: number = 20): Observable<{ \n    error: boolean, \n    data: { \n      watchlist: WatchlistItem[], \n      pagination: { \n        total: number, \n        page: number, \n        limit: number, \n        pages: number \n      } \n    } \n  }> {\n    const params = new HttpParams()\n      .set(\'page\', page.toString())\n      .set(\'limit\', limit.toString());\n    \n    return this.http.get<any>(`${this.apiUrl}/watchlist`, { params });\n  }\n  \n  // Add movie to watchlist\n  addToWatchlist(movieId: number): Observable<{ error: boolean, message: string }> {\n    return this.http.post<{ error: boolean, message: string }>(`${this.apiUrl}/watchlist/${movieId}`, {});\n  }\n  \n  // Remove movie from watchlist\n  removeFromWatchlist(movieId: number): Observable<{ error: boolean, message: string }> {\n    return this.http.delete<{ error: boolean, message: string }>(`${this.apiUrl}/watchlist/${movieId}`);\n  }\n  \n  // Check if movie is in watchlist\n  checkWatchlist(movieId: number): Observable<{ error: boolean, data: { in_watchlist: boolean } }> {\n    return this.http.get<{ error: boolean, data: { in_watchlist: boolean } }>(`${this.apiUrl}/watchlist/check/${movieId}`);\n  }\n  \n  // Get watch history for a profile\n  getWatchHistory(profileId: number, page: number = 1, limit: number = 20): Observable<{ \n    error: boolean, \n    data: { \n      history: WatchHistoryItem[], \n      pagination: { \n        total: number, \n        page: number, \n        limit: number, \n        pages: number \n      } \n    } \n  }> {\n    const params = new HttpParams()\n      .set(\'page\', page.toString())\n      .set(\'limit\', limit.toString());\n    \n    return this.http.get<any>(`${this.apiUrl}/history/${profileId}`, { params });\n  }\n  \n  // Update watch history\n  updateWatchHistory(profileId: number, movieId: number, watchTime: number, completed: boolean): Observable<{ \n    error: boolean, \n    message: string \n  }> {\n    return this.http.post<{ error: boolean, message: string }>(\n      `${this.apiUrl}/history/${profileId}/${movieId}`, \n      { watch_time: watchTime, completed }\n    );\n  }\n  \n  // Get recommendations for a profile\n  getRecommendations(profileId: number, limit: number = 10): Observable<{ \n    error: boolean, \n    data: { \n      recommendations: any[], \n      based_on: string \n    } \n  }> {\n    const params = new HttpParams().set(\'limit\', limit.toString());\n    \n    return this.http.get<any>(`${this.apiUrl}/recommendations/${profileId}`, { params });\n  }\n}\n</create-file>\n</function_calls>'}