{'role': 'assistant', 'content': 'Let\'s create the rating stars component:\n\n<function_calls>\n<create-file file_path="angocine/frontend/angocine/src/app/components/rating-stars/rating-stars.component.ts">\nimport { Component, OnInit, Input, Output, EventEmitter } from \'@angular/core\';\n\n@Component({\n  selector: \'app-rating-stars\',\n  templateUrl: \'./rating-stars.component.html\',\n  styleUrls: [\'./rating-stars.component.scss\']\n})\nexport class RatingStarsComponent implements OnInit {\n  @Input() rating: number = 0;\n  @Input() maxRating: number = 5;\n  @Input() size: \'sm\' | \'md\' | \'lg\' = \'md\';\n  @Input() readonly: boolean = false;\n  @Input() showValue: boolean = false;\n  @Input() color: string = \'#FF6A00\'; // Primary color\n  \n  @Output() ratingChange = new EventEmitter<number>();\n  \n  hoverRating: number = 0;\n  stars: number[] = [];\n  \n  constructor() {}\n  \n  ngOnInit(): void {\n    this.stars = Array(this.maxRating).fill(0).map((_, i) => i + 1);\n  }\n  \n  setRating(value: number): void {\n    if (this.readonly) return;\n    \n    this.rating = value;\n    this.ratingChange.emit(this.rating);\n  }\n  \n  setHoverRating(value: number): void {\n    if (this.readonly) return;\n    \n    this.hoverRating = value;\n  }\n  \n  resetHoverRating(): void {\n    if (this.readonly) return;\n    \n    this.hoverRating = 0;\n  }\n  \n  getStarClass(star: number): string {\n    const rating = this.hoverRating || this.rating;\n    \n    if (star <= rating) {\n      return \'filled\';\n    }\n    \n    // Handle half stars\n    if (star - 0.5 <= rating) {\n      return \'half\';\n    }\n    \n    return \'\';\n  }\n  \n  getContainerClass(): string {\n    let classes = \'rating-stars\';\n    \n    if (this.size) {\n      classes += ` size-${this.size}`;\n    }\n    \n    if (this.readonly) {\n      classes += \' readonly\';\n    }\n    \n    return classes;\n  }\n  \n  formatRating(rating: number): string {\n    return rating.toFixed(1);\n  }\n}\n</create-file>\n</function_calls>'}