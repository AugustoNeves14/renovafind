{'role': 'assistant', 'content': 'Let\'s create the search page component:\n\n<function_calls>\n<create-file file_path="angocine/frontend/angocine/src/app/pages/search/search.component.ts">\nimport { Component, OnInit } from \'@angular/core\';\nimport { ActivatedRoute, Router } from \'@angular/router\';\nimport { MovieService } from \'../../services/movie.service\';\nimport { AnalyticsService } from \'../../services/analytics.service\';\nimport { AuthService } from \'../../services/auth.service\';\nimport { Movie } from \'../../models/movie.model\';\nimport { Profile } from \'../../models/user.model\';\n\n@Component({\n  selector: \'app-search\',\n  templateUrl: \'./search.component.html\',\n  styleUrls: [\'./search.component.scss\']\n})\nexport class SearchComponent implements OnInit {\n  searchQuery: string = \'\';\n  movies: Movie[] = [];\n  totalMovies: number = 0;\n  currentPage: number = 1;\n  itemsPerPage: number = 20;\n  \n  isLoading: boolean = false;\n  error: string | null = null;\n  \n  currentProfile: Profile | null = null;\n  \n  constructor(\n    private movieService: MovieService,\n    private route: ActivatedRoute,\n    private router: Router,\n    private analyticsService: AnalyticsService,\n    private authService: AuthService\n  ) {}\n  \n  ngOnInit(): void {\n    // Get current profile\n    this.authService.currentProfile$.subscribe(profile => {\n      this.currentProfile = profile;\n    });\n    \n    // Get query params\n    this.route.queryParams.subscribe(params => {\n      this.searchQuery = params[\'q\'] || \'\';\n      this.currentPage = params[\'page\'] ? parseInt(params[\'page\']) : 1;\n      \n      if (this.searchQuery) {\n        this.searchMovies();\n      }\n    });\n  }\n  \n  searchMovies(): void {\n    if (!this.searchQuery.trim()) {\n      this.movies = [];\n      this.totalMovies = 0;\n      return;\n    }\n    \n    this.isLoading = true;\n    \n    this.movieService.getMovies(\n      this.currentPage,\n      this.itemsPerPage,\n      undefined,\n      undefined,\n      undefined,\n      undefined,\n      \'release_year\',\n      \'desc\',\n      this.searchQuery\n    ).subscribe(\n      response => {\n        this.movies = response.data.movies;\n        this.totalMovies = response.data.pagination.total;\n        this.isLoading = false;\n        \n        // Record search analytics\n        if (this.currentProfile) {\n          this.analyticsService.recordSearch(\n            this.currentProfile.id,\n            this.searchQuery\n          ).subscribe();\n        }\n      },\n      error => {\n        console.error(\'Error searching movies:\', error);\n        this.error = \'Erro ao buscar filmes. Por favor, tente novamente mais tarde.\';\n        this.isLoading = false;\n      }\n    );\n  }\n  \n  onSearch(): void {\n    if (!this.searchQuery.trim()) {\n      return;\n    }\n    \n    this.currentPage = 1;\n    this.updateQueryParams();\n    this.searchMovies();\n  }\n  \n  onPageChange(page: number): void {\n    this.currentPage = page;\n    this.updateQueryParams();\n    this.searchMovies();\n    \n    // Scroll to top\n    window.scrollTo({ top: 0, behavior: \'smooth\' });\n  }\n  \n  updateQueryParams(): void {\n    this.router.navigate([], {\n      relativeTo: this.route,\n      queryParams: {\n        q: this.searchQuery,\n        page: this.currentPage\n      },\n      queryParamsHandling: \'merge\'\n    });\n  }\n}\n</create-file>\n</function_calls>'}