{'role': 'assistant', 'content': 'Let\'s create the routes files for our backend. First, let\'s create the authentication routes:\n\n<function_calls>\n<create-file file_path="angocine/backend/src/routes/auth.routes.js">\nconst express = require(\'express\');\nconst router = express.Router();\nconst bcrypt = require(\'bcryptjs\');\nconst jwt = require(\'jsonwebtoken\');\nconst db = require(\'../db\');\nrequire(\'dotenv\').config();\n\n// Secret key for JWT\nconst JWT_SECRET = process.env.JWT_SECRET || \'angocine-secret-key\';\nconst JWT_EXPIRES_IN = process.env.JWT_EXPIRES_IN || \'24h\';\nconst REFRESH_TOKEN_SECRET = process.env.REFRESH_TOKEN_SECRET || \'angocine-refresh-secret\';\nconst REFRESH_TOKEN_EXPIRES_IN = process.env.REFRESH_TOKEN_EXPIRES_IN || \'7d\';\n\n// Register a new user\nrouter.post(\'/register\', async (req, res) => {\n  try {\n    const { username, email, password } = req.body;\n    \n    // Validate input\n    if (!username || !email || !password) {\n      return res.status(400).json({ error: true, message: \'Username, email, and password are required\' });\n    }\n    \n    // Check if user already exists\n    const existingUsers = await db.query(\n      \'SELECT * FROM users WHERE username = ? OR email = ?\',\n      [username, email]\n    );\n    \n    if (existingUsers.length > 0) {\n      return res.status(409).json({ error: true, message: \'Username or email already exists\' });\n    }\n    \n    // Hash password\n    const salt = await bcrypt.genSalt(10);\n    const hashedPassword = await bcrypt.hash(password, salt);\n    \n    // Create user\n    const result = await db.query(\n      \'INSERT INTO users (username, email, password) VALUES (?, ?, ?) RETURNING id\',\n      [username, email, hashedPassword]\n    );\n    \n    // Create default profile\n    const userId = db.USE_SQLITE ? result[0] : result[0].id;\n    await db.query(\n      \'INSERT INTO profiles (user_id, name, avatar, is_kid) VALUES (?, ?, ?, ?)\',\n      [userId, username, `https://i.pravatar.cc/150?u=${email}`, false]\n    );\n    \n    // Generate tokens\n    const token = jwt.sign(\n      { id: userId, username, email, role: \'user\' },\n      JWT_SECRET,\n      { expiresIn: JWT_EXPIRES_IN }\n    );\n    \n    const refreshToken = jwt.sign(\n      { id: userId, username, email },\n      REFRESH_TOKEN_SECRET,\n      { expiresIn: REFRESH_TOKEN_EXPIRES_IN }\n    );\n    \n    res.status(201).json({\n      error: false,\n      message: \'User registered successfully\',\n      data: {\n        token,\n        refreshToken,\n        user: {\n          id: userId,\n          username,\n          email,\n          role: \'user\'\n        }\n      }\n    });\n  } catch (err) {\n    console.error(\'Registration error:\', err);\n    res.status(500).json({ error: true, message: \'Server error during registration\' });\n  }\n});\n\n// Login\nrouter.post(\'/login\', async (req, res) => {\n  try {\n    const { email, password } = req.body;\n    \n    // Validate input\n    if (!email || !password) {\n      return res.status(400).json({ error: true, message: \'Email and password are required\' });\n    }\n    \n    // Find user\n    const users = await db.query(\'SELECT * FROM users WHERE email = ?\', [email]);\n    \n    if (users.length === 0) {\n      return res.status(401).json({ error: true, message: \'Invalid email or password\' });\n    }\n    \n    const user = users[0];\n    \n    // Check password\n    const validPassword = await bcrypt.compare(password, user.password);\n    if (!validPassword) {\n      return res.status(401).json({ error: true, message: \'Invalid email or password\' });\n    }\n    \n    // Generate tokens\n    const token = jwt.sign(\n      { id: user.id, username: user.username, email: user.email, role: user.role },\n      JWT_SECRET,\n      { expiresIn: JWT_EXPIRES_IN }\n    );\n    \n    const refreshToken = jwt.sign(\n      { id: user.id, username: user.username, email: user.email },\n      REFRESH_TOKEN_SECRET,\n      { expiresIn: REFRESH_TOKEN_EXPIRES_IN }\n    );\n    \n    // Get user profiles\n    const profiles = await db.query(\'SELECT * FROM profiles WHERE user_id = ?\', [user.id]);\n    \n    res.status(200).json({\n      error: false,\n      message: \'Login successful\',\n      data: {\n        token,\n        refreshToken,\n        user: {\n          id: user.id,\n          username: user.username,\n          email: user.email,\n          role: user.role,\n          profiles: profiles\n        }\n      }\n    });\n  } catch (err) {\n    console.error(\'Login error:\', err);\n    res.status(500).json({ error: true, message: \'Server error during login\' });\n  }\n});\n\n// Refresh token\nrouter.post(\'/refresh-token\', async (req, res) => {\n  try {\n    const { refreshToken } = req.body;\n    \n    if (!refreshToken) {\n      return res.status(400).json({ error: true, message: \'Refresh token is required\' });\n    }\n    \n    // Verify refresh token\n    const decoded = jwt.verify(refreshToken, REFRESH_TOKEN_SECRET);\n    \n    // Find user\n    const users = await db.query(\'SELECT * FROM users WHERE id = ?\', [decoded.id]);\n    \n    if (users.length === 0) {\n      return res.status(401).json({ error: true, message: \'Invalid refresh token\' });\n    }\n    \n    const user = users[0];\n    \n    // Generate new access token\n    const newToken = jwt.sign(\n      { id: user.id, username: user.username, email: user.email, role: user.role },\n      JWT_SECRET,\n      { expiresIn: JWT_EXPIRES_IN }\n    );\n    \n    res.status(200).json({\n      error: false,\n      message: \'Token refreshed successfully\',\n      data: {\n        token: newToken\n      }\n    });\n  } catch (err) {\n    console.error(\'Token refresh error:\', err);\n    res.status(403).json({ error: true, message: \'Invalid refresh token\' });\n  }\n});\n\n// Forgot password\nrouter.post(\'/forgot-password\', async (req, res) => {\n  try {\n    const { email } = req.body;\n    \n    if (!email) {\n      return res.status(400).json({ error: true, message: \'Email is required\' });\n    }\n    \n    // Check if user exists\n    const users = await db.query(\'SELECT * FROM users WHERE email = ?\', [email]);\n    \n    if (users.length === 0) {\n      // For security reasons, don\'t reveal that the email doesn\'t exist\n      return res.status(200).json({\n        error: false,\n        message: \'If your email is registered, you will receive a password reset link\'\n      });\n    }\n    \n    // In a real application, send an email with a reset link\n    // For this demo, we\'ll just return a success message\n    \n    res.status(200).json({\n      error: false,\n      message: \'If your email is registered, you will receive a password reset link\'\n    });\n  } catch (err) {\n    console.error(\'Forgot password error:\', err);\n    res.status(500).json({ error: true, message: \'Server error\' });\n  }\n});\n\nmodule.exports = router;\n</create-file>\n</function_calls>'}