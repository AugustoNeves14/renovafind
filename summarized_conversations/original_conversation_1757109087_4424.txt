{'role': 'assistant', 'content': 'Let\'s create the database connection file that supports both PostgreSQL and SQLite:\n\n<function_calls>\n<create-file file_path="angocine/backend/src/db.js">\nconst { Pool } = require(\'pg\');\nconst sqlite3 = require(\'sqlite3\').verbose();\nconst path = require(\'path\');\nconst fs = require(\'fs\');\nrequire(\'dotenv\').config();\n\n// Determine which database to use based on environment variables\nconst USE_SQLITE = process.env.USE_SQLITE === \'true\' || !process.env.DATABASE_URL;\n\nlet pool;\nlet db;\n\n// Create database directory if it doesn\'t exist (for SQLite)\nconst dbDir = path.join(__dirname, \'../database\');\nif (!fs.existsSync(dbDir)) {\n  fs.mkdirSync(dbDir, { recursive: true });\n}\n\n// SQLite database file path\nconst sqliteDbPath = path.join(dbDir, \'angocine.sqlite\');\n\n// Initialize database connection\nconst initializeDatabase = async () => {\n  if (USE_SQLITE) {\n    console.log(\'Using SQLite database\');\n    return initializeSQLite();\n  } else {\n    console.log(\'Using PostgreSQL database\');\n    return initializePostgreSQL();\n  }\n};\n\n// Initialize PostgreSQL connection\nconst initializePostgreSQL = async () => {\n  try {\n    pool = new Pool({\n      connectionString: process.env.DATABASE_URL,\n      ssl: process.env.NODE_ENV === \'production\' ? { rejectUnauthorized: false } : false\n    });\n\n    // Test connection\n    const client = await pool.connect();\n    console.log(\'Connected to PostgreSQL database\');\n    client.release();\n\n    // Create tables\n    await createPostgreSQLTables();\n    \n    // Seed data if needed\n    if (process.env.SEED_DATA === \'true\') {\n      await seedData();\n    }\n\n    return pool;\n  } catch (err) {\n    console.error(\'PostgreSQL connection error:\', err);\n    throw err;\n  }\n};\n\n// Initialize SQLite connection\nconst initializeSQLite = () => {\n  return new Promise((resolve, reject) => {\n    db = new sqlite3.Database(sqliteDbPath, sqlite3.OPEN_READWRITE | sqlite3.OPEN_CREATE, async (err) => {\n      if (err) {\n        console.error(\'SQLite connection error:\', err);\n        reject(err);\n        return;\n      }\n      \n      console.log(\'Connected to SQLite database\');\n      \n      try {\n        // Create tables\n        await createSQLiteTables();\n        \n        // Seed data\n        await seedData();\n        \n        resolve(db);\n      } catch (err) {\n        reject(err);\n      }\n    });\n  });\n};\n\n// Create PostgreSQL tables\nconst createPostgreSQLTables = async () => {\n  const client = await pool.connect();\n  \n  try {\n    await client.query(\'BEGIN\');\n\n    // Users table\n    await client.query(`\n      CREATE TABLE IF NOT EXISTS users (\n        id SERIAL PRIMARY KEY,\n        username VARCHAR(50) UNIQUE NOT NULL,\n        email VARCHAR(100) UNIQUE NOT NULL,\n        password VARCHAR(100) NOT NULL,\n        role VARCHAR(20) DEFAULT \'user\',\n        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n        updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n      )\n    `);\n\n    // Profiles table\n    await client.query(`\n      CREATE TABLE IF NOT EXISTS profiles (\n        id SERIAL PRIMARY KEY,\n        user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,\n        name VARCHAR(50) NOT NULL,\n        avatar VARCHAR(255),\n        is_kid BOOLEAN DEFAULT false,\n        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n        updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n      )\n    `);\n\n    // Movies table\n    await client.query(`\n      CREATE TABLE IF NOT EXISTS movies (\n        id SERIAL PRIMARY KEY,\n        title VARCHAR(255) NOT NULL,\n        description TEXT,\n        release_year INTEGER,\n        duration INTEGER,\n        genre VARCHAR(100),\n        director VARCHAR(100),\n        cast TEXT,\n        poster_url VARCHAR(255),\n        backdrop_url VARCHAR(255),\n        trailer_url VARCHAR(255),\n        video_url VARCHAR(255),\n        rating DECIMAL(2,1),\n        language VARCHAR(50),\n        maturity_rating VARCHAR(10),\n        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n        updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n      )\n    `);\n\n    // Reviews table\n    await client.query(`\n      CREATE TABLE IF NOT EXISTS reviews (\n        id SERIAL PRIMARY KEY,\n        user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,\n        movie_id INTEGER REFERENCES movies(id) ON DELETE CASCADE,\n        rating INTEGER CHECK (rating >= 1 AND rating <= 5),\n        comment TEXT,\n        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n        updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n      )\n    `);\n\n    // Watchlist table\n    await client.query(`\n      CREATE TABLE IF NOT EXISTS watchlist (\n        id SERIAL PRIMARY KEY,\n        user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,\n        movie_id INTEGER REFERENCES movies(id) ON DELETE CASCADE,\n        added_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n        UNIQUE(user_id, movie_id)\n      )\n    `);\n\n    // Watch history table\n    await client.query(`\n      CREATE TABLE IF NOT EXISTS watch_history (\n        id SERIAL PRIMARY KEY,\n        profile_id INTEGER REFERENCES profiles(id) ON DELETE CASCADE,\n        movie_id INTEGER REFERENCES movies(id) ON DELETE CASCADE,\n        watch_time INTEGER DEFAULT 0,\n        completed BOOLEAN DEFAULT false,\n        last_watched TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n        updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n      )\n    `);\n\n    // Analytics events table\n    await client.query(`\n      CREATE TABLE IF NOT EXISTS analytics_events (\n        id SERIAL PRIMARY KEY,\n        profile_id INTEGER REFERENCES profiles(id) ON DELETE CASCADE,\n        movie_id INTEGER REFERENCES movies(id) ON DELETE CASCADE,\n        event_type VARCHAR(50) NOT NULL,\n        event_data JSONB,\n        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n      )\n    `);\n\n    await client.query(\'COMMIT\');\n  } catch (err) {\n    await client.query(\'ROLLBACK\');\n    console.error(\'Error creating PostgreSQL tables:\', err);\n    throw err;\n  } finally {\n    client.release();\n  }\n};\n\n// Create SQLite tables\nconst createSQLiteTables = () => {\n  return new Promise((resolve, reject) => {\n    const queries = [\n      // Users table\n      `CREATE TABLE IF NOT EXISTS users (\n        id INTEGER PRIMARY KEY AUTOINCREMENT,\n        username TEXT UNIQUE NOT NULL,\n        email TEXT UNIQUE NOT NULL,\n        password TEXT NOT NULL,\n        role TEXT DEFAULT \'user\',\n        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n        updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n      )`,\n      \n      // Profiles table\n      `CREATE TABLE IF NOT EXISTS profiles (\n        id INTEGER PRIMARY KEY AUTOINCREMENT,\n        user_id INTEGER,\n        name TEXT NOT NULL,\n        avatar TEXT,\n        is_kid INTEGER DEFAULT 0,\n        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n        updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n        FOREIGN KEY (user_id) REFERENCES users (id) ON DELETE CASCADE\n      )`,\n      \n      // Movies table\n      `CREATE TABLE IF NOT EXISTS movies (\n        id INTEGER PRIMARY KEY AUTOINCREMENT,\n        title TEXT NOT NULL,\n        description TEXT,\n        release_year INTEGER,\n        duration INTEGER,\n        genre TEXT,\n        director TEXT,\n        cast TEXT,\n        poster_url TEXT,\n        backdrop_url TEXT,\n        trailer_url TEXT,\n        video_url TEXT,\n        rating REAL,\n        language TEXT,\n        maturity_rating TEXT,\n        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n        updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n      )`,\n      \n      // Reviews table\n      `CREATE TABLE IF NOT EXISTS reviews (\n        id INTEGER PRIMARY KEY AUTOINCREMENT,\n        user_id INTEGER,\n        movie_id INTEGER,\n        rating INTEGER CHECK (rating >= 1 AND rating <= 5),\n        comment TEXT,\n        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n        updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n        FOREIGN KEY (user_id) REFERENCES users (id) ON DELETE CASCADE,\n        FOREIGN KEY (movie_id) REFERENCES movies (id) ON DELETE CASCADE\n      )`,\n      \n      // Watchlist table\n      `CREATE TABLE IF NOT EXISTS watchlist (\n        id INTEGER PRIMARY KEY AUTOINCREMENT,\n        user_id INTEGER,\n        movie_id INTEGER,\n        added_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n        UNIQUE(user_id, movie_id),\n        FOREIGN KEY (user_id) REFERENCES users (id) ON DELETE CASCADE,\n        FOREIGN KEY (movie_id) REFERENCES movies (id) ON DELETE CASCADE\n      )`,\n      \n      // Watch history table\n      `CREATE TABLE IF NOT EXISTS watch_history (\n        id INTEGER PRIMARY KEY AUTOINCREMENT,\n        profile_id INTEGER,\n        movie_id INTEGER,\n        watch_time INTEGER DEFAULT 0,\n        completed INTEGER DEFAULT 0,\n        last_watched TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n        updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n        FOREIGN KEY (profile_id) REFERENCES profiles (id) ON DELETE CASCADE,\n        FOREIGN KEY (movie_id) REFERENCES movies (id) ON DELETE CASCADE\n      )`,\n      \n      // Analytics events table\n      `CREATE TABLE IF NOT EXISTS analytics_events (\n        id INTEGER PRIMARY KEY AUTOINCREMENT,\n        profile_id INTEGER,\n        movie_id INTEGER,\n        event_type TEXT NOT NULL,\n        event_data TEXT,\n        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n        FOREIGN KEY (profile_id) REFERENCES profiles (id) ON DELETE CASCADE,\n        FOREIGN KEY (movie_id) REFERENCES movies (id) ON DELETE CASCADE\n      )`\n    ];\n\n    db.serialize(() => {\n      db.run(\'PRAGMA foreign_keys = ON\');\n      \n      db.run(\'BEGIN TRANSACTION\', (err) => {\n        if (err) {\n          reject(err);\n          return;\n        }\n        \n        let completed = 0;\n        \n        queries.forEach((query) => {\n          db.run(query, (err) => {\n            if (err) {\n              db.run(\'ROLLBACK\');\n              reject(err);\n              return;\n            }\n            \n            completed++;\n            if (completed === queries.length) {\n              db.run(\'COMMIT\', (err) => {\n                if (err) {\n                  reject(err);\n                } else {\n                  resolve();\n                }\n              });\n            }\n          });\n        });\n      });\n    });\n  });\n};\n\n// Seed data function\nconst seedData = async () => {\n  if (USE_SQLITE) {\n    return seedSQLiteData();\n  } else {\n    return seedPostgreSQLData();\n  }\n};\n\n// Seed data for PostgreSQL\nconst seedPostgreSQLData = async () => {\n  const client = await pool.connect();\n  \n  try {\n    // Check if movies table is empty\n    const { rows } = await client.query(\'SELECT COUNT(*) FROM movies\');\n    \n    if (parseInt(rows[0].count) > 0) {\n      console.log(\'Database already seeded, skipping...\');\n      return;\n    }\n    \n    console.log(\'Seeding PostgreSQL database...\');\n    \n    // Admin user\n    await client.query(`\n      INSERT INTO users (username, email, password, role)\n      VALUES (\'admin\', \'admin@angocine.com\', \'$2a$10$XOPbrlUPQdwdJUpSrIF6X.LbE14qsMmKGq4V9//8iBFZPxFJkjPJO\', \'admin\')\n    `);\n    \n    // Sample user\n    await client.query(`\n      INSERT INTO users (username, email, password)\n      VALUES (\'user\', \'user@angocine.com\', \'$2a$10$XOPbrlUPQdwdJUpSrIF6X.LbE14qsMmKGq4V9//8iBFZPxFJkjPJO\')\n    `);\n    \n    // Sample profiles\n    await client.query(`\n      INSERT INTO profiles (user_id, name, avatar, is_kid)\n      VALUES \n        (2, \'User\', \'https://i.pravatar.cc/150?img=3\', false),\n        (2, \'Kids\', \'https://i.pravatar.cc/150?img=8\', true)\n    `);\n    \n    // Sample movies\n    const movies = getMovieSeedData();\n    \n    for (const movie of movies) {\n      await client.query(`\n        INSERT INTO movies (\n          title, description, release_year, duration, genre, director, cast,\n          poster_url, backdrop_url, trailer_url, video_url, rating, language, maturity_rating\n        ) VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14)\n      `, [\n        movie.title, movie.description, movie.release_year, movie.duration, movie.genre,\n        movie.director, movie.cast, movie.poster_url, movie.backdrop_url, movie.trailer_url,\n        movie.video_url, movie.rating, movie.language, movie.maturity_rating\n      ]);\n    }\n    \n    console.log(\'PostgreSQL database seeded successfully\');\n  } catch (err) {\n    console.error(\'Error seeding PostgreSQL database:\', err);\n    throw err;\n  } finally {\n    client.release();\n  }\n};\n\n// Seed data for SQLite\nconst seedSQLiteData = () => {\n  return new Promise((resolve, reject) => {\n    // Check if movies table is empty\n    db.get(\'SELECT COUNT(*) as count FROM movies\', (err, row) => {\n      if (err) {\n        reject(err);\n        return;\n      }\n      \n      if (row.count > 0) {\n        console.log(\'Database already seeded, skipping...\');\n        resolve();\n        return;\n      }\n      \n      console.log(\'Seeding SQLite database...\');\n      \n      db.serialize(() => {\n        db.run(\'BEGIN TRANSACTION\', (err) => {\n          if (err) {\n            reject(err);\n            return;\n          }\n          \n          // Admin user (password: admin123)\n          db.run(`\n            INSERT INTO users (username, email, password, role)\n            VALUES (\'admin\', \'admin@angocine.com\', \'$2a$10$XOPbrlUPQdwdJUpSrIF6X.LbE14qsMmKGq4V9//8iBFZPxFJkjPJO\', \'admin\')\n          `, function(err) {\n            if (err) {\n              db.run(\'ROLLBACK\');\n              reject(err);\n              return;\n            }\n            \n            // Sample user (password: user123)\n            db.run(`\n              INSERT INTO users (username, email, password)\n              VALUES (\'user\', \'user@angocine.com\', \'$2a$10$XOPbrlUPQdwdJUpSrIF6X.LbE14qsMmKGq4V9//8iBFZPxFJkjPJO\')\n            `, function(err) {\n              if (err) {\n                db.run(\'ROLLBACK\');\n                reject(err);\n                return;\n              }\n              \n              // Sample profiles\n              db.run(`\n                INSERT INTO profiles (user_id, name, avatar, is_kid)\n                VALUES (2, \'User\', \'https://i.pravatar.cc/150?img=3\', 0)\n              `, function(err) {\n                if (err) {\n                  db.run(\'ROLLBACK\');\n                  reject(err);\n                  return;\n                }\n                \n                db.run(`\n                  INSERT INTO profiles (user_id, name, avatar, is_kid)\n                  VALUES (2, \'Kids\', \'https://i.pravatar.cc/150?img=8\', 1)\n                `, function(err) {\n                  if (err) {\n                    db.run(\'ROLLBACK\');\n                    reject(err);\n                    return;\n                  }\n                  \n                  // Sample movies\n                  const movies = getMovieSeedData();\n                  let completed = 0;\n                  \n                  movies.forEach((movie) => {\n                    db.run(`\n                      INSERT INTO movies (\n                        title, description, release_year, duration, genre, director, cast,\n                        poster_url, backdrop_url, trailer_url, video_url, rating, language, maturity_rating\n                      ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)\n                    `, [\n                      movie.title, movie.description, movie.release_year, movie.duration, movie.genre,\n                      movie.director, movie.cast, movie.poster_url, movie.backdrop_url, movie.trailer_url,\n                      movie.video_url, movie.rating, movie.language, movie.maturity_rating\n                    ], function(err) {\n                      if (err) {\n                        db.run(\'ROLLBACK\');\n                        reject(err);\n                        return;\n                      }\n                      \n                      completed++;\n                      if (completed === movies.length) {\n                        db.run(\'COMMIT\', (err) => {\n                          if (err) {\n                            reject(err);\n                          } else {\n                            console.log(\'SQLite database seeded successfully\');\n                            resolve();\n                          }\n                        });\n                      }\n                    });\n                  });\n                });\n              });\n            });\n          });\n        });\n      });\n    });\n  });\n};\n\n// Movie seed data\nconst getMovieSeedData = () => {\n  return [\n    {\n      title: "Duna: Parte Dois",\n      description: "Paul Atreides se une a Chani e aos Fremen enquanto busca vingança contra os conspiradores que destruíram sua família. Enfrentando uma escolha entre o amor de sua vida e o destino do universo, ele deve evitar um futuro terrível que só ele pode prever.",\n      release_year: 2024,\n      duration: 166,\n      genre: "Ficção Científica, Aventura",\n      director: "Denis Villeneuve",\n      cast: "Timothée Chalamet, Zendaya, Rebecca Ferguson, Josh Brolin",\n      poster_url: "https://image.tmdb.org/t/p/w500/jQNOzoiaIQWxJAx8OUighnvnhRA.jpg",\n      backdrop_url: "https://image.tmdb.org/t/p/original/jZIYaISP3GBSrVOPfrp98AMa8Ng.jpg",\n      trailer_url: "https://www.youtube.com/watch?v=Way9Dexny3w",\n      video_url: "/videos/sample-video.mp4",\n      rating: 8.5,\n      language: "Inglês",\n      maturity_rating: "PG-13"\n    },\n    {\n      title: "Oppenheimer",\n      description: "A história do cientista americano J. Robert Oppenheimer e seu papel no desenvolvimento da bomba atômica durante a Segunda Guerra Mundial.",\n      release_year: 2023,\n      duration: 180,\n      genre: "Drama, História",\n      director: "Christopher Nolan",\n      cast: "Cillian Murphy, Emily Blunt, Matt Damon, Robert Downey Jr.",\n      poster_url: "https://image.tmdb.org/t/p/w500/8Gxv8gSFCU0XGDykEGv7zR1n2ua.jpg",\n      backdrop_url: "https://image.tmdb.org/t/p/original/rLb2cwF3Pazuxaj0sRXQ037tGI1.jpg",\n      trailer_url: "https://www.youtube.com/watch?v=bK6ldnjE3Y0",\n      video_url: "/videos/sample-video.mp4",\n      rating: 8.9,\n      language: "Inglês",\n      maturity_rating: "R"\n    },\n    {\n      title: "Pobres Criaturas",\n      description: "A jovem Bella Baxter é trazida de volta à vida pelo brilhante e não convencional cientista Dr. Godwin Baxter. Sob a proteção de Baxter, Bella está ansiosa para aprender. Desejando conhecer mais sobre o mundo, Bella foge com Duncan Wedderburn, um advogado astuto e debochado, em uma aventura por continentes.",\n      release_year: 2023,\n      duration: 141,\n      genre: "Ficção Científica, Romance, Comédia",\n      director: "Yorgos Lanthimos",\n      cast: "Emma Stone, Mark Ruffalo, Willem Dafoe, Ramy Youssef",\n      poster_url: "https://image.tmdb.org/t/p/w500/kCGlIMHnOm8JPXq3rXM6c5wMxcT.jpg",\n      backdrop_url: "https://image.tmdb.org/t/p/original/bQS43HSLZzMjZkcHJz4fGc7fNdz.jpg",\n      trailer_url: "https://www.youtube.com/watch?v=RlbR5N6veqw",\n      video_url: "/videos/sample-video.mp4",\n      rating: 8.1,\n      language: "Inglês",\n      maturity_rating: "R"\n    },\n    {\n      title: "Zona de Interesse",\n      description: "O comandante de Auschwitz, Rudolf Höss, e sua esposa Hedwig, se esforçam para construir uma vida de sonho para sua família em uma casa com jardim próxima ao campo de concentração.",\n      release_year: 2023,\n      duration: 105,\n      genre: "Drama, História, Guerra",\n      director: "Jonathan Glazer",\n      cast: "Christian Friedel, Sandra Hüller, Johann Karthaus, Luis Noah Witte",\n      poster_url: "https://image.tmdb.org/t/p/w500/A0EX5DVNRIiDOKnUQZVSwoUFj3x.jpg",\n      backdrop_url: "https://image.tmdb.org/t/p/original/7TdVWAO2VV6EH9Iiw1HA9Od0OOQ.jpg",\n      trailer_url: "https://www.youtube.com/watch?v=9mAw0gAZuRE",\n      video_url: "/videos/sample-video.mp4",\n      rating: 7.8,\n      language: "Alemão",\n      maturity_rating: "R"\n    },\n    {\n      title: "Anatomia de uma Queda",\n      description: "Uma mulher é suspeita da morte do marido e seu filho cego enfrenta um dilema moral como única testemunha.",\n      release_year: 2023,\n      duration: 150,\n      genre: "Drama, Crime, Mistério",\n      director: "Justine Triet",\n      cast: "Sandra Hüller, Swann Arlaud, Milo Machado Graner",\n      poster_url: "https://image.tmdb.org/t/p/w500/kQs6keheMwCxJxrzV83VUwFtHkB.jpg",\n      backdrop_url: "https://image.tmdb.org/t/p/original/hzZ1Qe7HumaTu4TFAIxx2wNl9Ij.jpg",\n      trailer_url: "https://www.youtube.com/watch?v=pRpKNbVVt-M",\n      video_url: "/videos/sample-video.mp4",\n      rating: 7.9,\n      language: "Francês",\n      maturity_rating: "R"\n    },\n    {\n      title: "Barbie",\n      description: "Barbie e Ken estão tendo o melhor dos tempos em Barbieland colorido e aparentemente perfeito. No entanto, quando eles têm a oportunidade de ir para o mundo real, eles logo descobrem as alegrias e os perigos de viver entre os humanos.",\n      release_year: 2023,\n      duration: 114,\n      genre: "Comédia, Aventura, Fantasia",\n      director: "Greta Gerwig",\n      cast: "Margot Robbie, Ryan Gosling, America Ferrera, Kate McKinnon",\n      poster_url: "https://image.tmdb.org/t/p/w500/iuFNMS8U5cb6xfzi51Dbkovj7vM.jpg",\n      backdrop_url: "https://image.tmdb.org/t/p/original/nHf61UzkfFno5X1ofIhugCPus2R.jpg",\n      trailer_url: "https://www.youtube.com/watch?v=pBk4NYhWNMM",\n      video_url: "/videos/sample-video.mp4",\n      rating: 7.0,\n      language: "Inglês",\n      maturity_rating: "PG-13"\n    },\n    {\n      title: "Assassino por Acaso",\n      description: "Um assassino profissional sofre um acidente que o faz perder a memória. Ele acorda acreditando que é um ator de comédia stand-up. Quando seu passado violento o alcança, ele redescobre suas habilidades letais de maneiras surpreendentemente hilárias.",\n      release_year: 2024,\n      duration: 117,\n      genre: "Ação, Comédia",\n      director: "Richard Linklater",\n      cast: "Glen Powell, Adria Arjona, Retta, Molly Bernard",\n      poster_url: "https://image.tmdb.org/t/p/w500/aPQsU3yLDUOhLJYnSqkhKRkQTAw.jpg",\n      backdrop_url: "https://image.tmdb.org/t/p/original/5YnhQwBV91DG1ySqrSWfzXkWvTN.jpg",\n      trailer_url: "https://www.youtube.com/watch?v=9xKWS_NZ7e0",\n      video_url: "/videos/sample-video.mp4",\n      rating: 7.3,\n      language: "Inglês",\n      maturity_rating: "R"\n    },\n    {\n      title: "Godzilla e Kong: O Novo Império",\n      description: "Godzilla e Kong unem forças contra uma ameaça colossal escondida em nosso mundo, desafiando sua própria existência e a nossa.",\n      release_year: 2024,\n      duration: 115,\n      genre: "Ação, Ficção Científica, Aventura",\n      director: "Adam Wingard",\n      cast: "Rebecca Hall, Brian Tyree Henry, Dan Stevens, Kaylee Hottle",\n      poster_url: "https://image.tmdb.org/t/p/w500/qmP8K63EmHKxco68XvAK2yzXgAm.jpg",\n      backdrop_url: "https://image.tmdb.org/t/p/original/zPcuuhFoRGQDr1n2yvxlCvBGSH8.jpg",\n      trailer_url: "https://www.youtube.com/watch?v=odM92ap8_c0",\n      video_url: "/videos/sample-video.mp4",\n      rating: 7.0,\n      language: "Inglês",\n      maturity_rating: "PG-13"\n    },\n    {\n      title: "Planeta dos Macacos: O Reinado",\n      description: "Muitas gerações no futuro, após o reinado de César, os macacos são a espécie dominante e os humanos vivem nas sombras. Um novo líder tirano constrói seu império, enquanto um jovem macaco empreende uma jornada angustiante que o levará a questionar tudo o que sabia sobre o passado e a fazer escolhas que definirão o futuro para macacos e humanos.",\n      release_year: 2024,\n      duration: 145,\n      genre: "Ficção Científica, Aventura, Ação",\n      director: "Wes Ball",\n      cast: "Owen Teague, Freya Allan, Kevin Durand, Peter Macon",\n      poster_url: "https://image.tmdb.org/t/p/w500/jLLtx3nTRSbILZ74qveP1x4SNe.jpg",\n      backdrop_url: "https://image.tmdb.org/t/p/original/6OnoMgGFuZ921eV8v8yEyXoag19.jpg",\n      trailer_url: "https://www.youtube.com/watch?v=6sxn3kbgEiU",\n      video_url: "/videos/sample-video.mp4",\n      rating: 7.2,\n      language: "Inglês",\n      maturity_rating: "PG-13"\n    },\n    {\n      title: "Divertida Mente 2",\n      description: "A adolescente Riley começa a ser guiada por novas emoções: Ansiedade, Inveja, Tédio e Vergonha. Enquanto isso, Alegria, Tristeza, Raiva, Medo e Nojinho, que há muito tempo administram uma operação bem-sucedida, não têm certeza de como se sentir quando a sede é expandida.",\n      release_year: 2024,\n      duration: 96,\n      genre: "Animação, Comédia, Família",\n      director: "Kelsey Mann",\n      cast: "Amy Poehler, Phyllis Smith, Lewis Black, Tony Hale",\n      poster_url: "https://image.tmdb.org/t/p/w500/7tBvUMyGgMxvQMB3U64QKIcBevT.jpg",\n      backdrop_url: "https://image.tmdb.org/t/p/original/AhifyrSNkRVFMJ94CEMfBv1FaMz.jpg",\n      trailer_url: "https://www.youtube.com/watch?v=VrQu4GrHl9o",\n      video_url: "/videos/sample-video.mp4",\n      rating: 8.0,\n      language: "Inglês",\n      maturity_rating: "PG"\n    },\n    {\n      title: "Twisters",\n      description: "Kate Cooper, uma ex-caçadora de tempestades assombrada por um encontro devastador com um tornado durante seus anos de faculdade, agora estuda padrões de tempestades em seu computador em Nova York. Ela é atraída de volta ao campo por seu amigo Javi para testar um novo sistema de rastreamento, onde se junta ao imprudente caçador de tempestades Tyler Owens e sua equipe.",\n      release_year: 2024,\n      duration: 122,\n      genre: "Ação, Drama, Aventura",\n      director: "Lee Isaac Chung",\n      cast: "Daisy Edgar-Jones, Glen Powell, Anthony Ramos, Brandon Perea",\n      poster_url: "https://image.tmdb.org/t/p/w500/gIbDjxwOgEwLKkOeUWnQrWBFQGl.jpg",\n      backdrop_url: "https://image.tmdb.org/t/p/original/ufWw2aJRVjz2M3GKsKEUgQQYJNm.jpg",\n      trailer_url: "https://www.youtube.com/watch?v=GwXFVqKuH-w",\n      video_url: "/videos/sample-video.mp4",\n      rating: 7.1,\n      language: "Inglês",\n      maturity_rating: "PG-13"\n    },\n    {\n      title: "Deadpool & Wolverine",\n      description: "Wolverine está aposentado, mas é recrutado por Deadpool para salvar o universo Fox de super-heróis.",\n      release_year: 2024,\n      duration: 127,\n      genre: "Ação, Comédia, Ficção Científica",\n      director: "Shawn Levy",\n      cast: "Ryan Reynolds, Hugh Jackman, Emma Corrin, Morena Baccarin",\n      poster_url: "https://image.tmdb.org/t/p/w500/4yGhkUUFJqfYGkRJQrENhEgKUdj.jpg",\n      backdrop_url: "https://image.tmdb.org/t/p/original/yOm993lsJyPmBodlYjgpPwBjXP9.jpg",\n      trailer_url: "https://www.youtube.com/watch?v=uTLWzHhH2NM",\n      video_url: "/videos/sample-video.mp4",\n      rating: 7.9,\n      language: "Inglês",\n      maturity_rating: "R"\n    },\n    {\n      title: "Alien: Romulus",\n      description: "Um grupo de jovens colonizadores espaciais explora as profundezas de uma estação espacial abandonada, onde encontram uma das formas de vida mais perigosas do universo.",\n      release_year: 2024,\n      duration: 119,\n      genre: "Ficção Científica, Terror, Thriller",\n      director: "Fede Alvarez",\n      cast: "Cailee Spaeny, David Jonsson, Archie Renaux, Isabela Merced",\n      poster_url: "https://image.tmdb.org/t/p/w500/dB5vP9rfJ5y7rXm1XDJgDjKQHtc.jpg",\n      backdrop_url: "https://image.tmdb.org/t/p/original/bQTfSXQrcVwXJ5TvNzbd3ioMnnM.jpg",\n      trailer_url: "https://www.youtube.com/watch?v=Wd4jKXiI9B0",\n      video_url: "/videos/sample-video.mp4",\n      rating: 7.0,\n      language: "Inglês",\n      maturity_rating: "R"\n    },\n    {\n      title: "Coringa: Delírio a Dois",\n      description: "Arthur Fleck está internado em Arkham quando se apaixona por sua terapeuta, Harley Quinn. Juntos, eles embarcam em uma jornada musical de crime e paixão pelas ruas de Gotham City.",\n      release_year: 2024,\n      duration: 138,\n      genre: "Crime, Thriller, Drama",\n      director: "Todd Phillips",\n      cast: "Joaquin Phoenix, Lady Gaga, Brendan Gleeson, Zazie Beetz",\n      poster_url: "https://image.tmdb.org/t/p/w500/gKkl37BQWbR3H9T9Jd7eHSLGOof.jpg",\n      backdrop_url: "https://image.tmdb.org/t/p/original/7NRGVoGnj9MlzXeW6KTBbUXAiQb.jpg",\n      trailer_url: "https://www.youtube.com/watch?v=B9tDR8WxsdU",\n      video_url: "/videos/sample-video.mp4",\n      rating: 6.5,\n      language: "Inglês",\n      maturity_rating: "R"\n    },\n    {\n      title: "Venom: A Última Rodada",\n      description: "Eddie Brock e Venom estão fugindo. Perseguidos por seus dois mundos e com o cerco se fechando, a dupla é forçada a tomar uma decisão devastadora que encerrará a relação entre o anfitrião e o simbionte.",\n      release_year: 2024,\n      duration: 116,\n      genre: "Ficção Científica, Ação, Aventura",\n      director: "Kelly Marcel",\n      cast: "Tom Hardy, Chiwetel Ejiofor, Juno Temple, Rhys Ifans",\n      poster_url: "https://image.tmdb.org/t/p/w500/vKUoRaZwNdpzJBBxdJwZZ7YVaV9.jpg",\n      backdrop_url: "https://image.tmdb.org/t/p/original/wrThRSByMQH8aHlNlJFLiK0W5FL.jpg",\n      trailer_url: "https://www.youtube.com/watch?v=pTGu0TZq0QE",\n      video_url: "/videos/sample-video.mp4",\n      rating: 6.8,\n      language: "Inglês",\n      maturity_rating: "PG-13"\n    },\n    {\n      title: "Gladiador II",\n      description: "Anos após testemunhar a morte do herói Maximus pelas mãos de seu tio, Lucius é forçado a entrar no Coliseu após sua casa ser conquistada pelos tirânicos imperadores que agora lideram Roma com mão de ferro.",\n      release_year: 2024,\n      duration: 155,\n      genre: "Ação, Aventura, Drama",\n      director: "Ridley Scott",\n      cast: "Paul Mescal, Pedro Pascal, Denzel Washington, Connie Nielsen",\n      poster_url: "https://image.tmdb.org/t/p/w500/fTQVBY8KK0RX9eHJ4Otj0CQxBKu.jpg",\n      backdrop_url: "https://image.tmdb.org/t/p/original/8xTzD2F1OKJBmEzTrQqc9JBIUw8.jpg",\n      trailer_url: "https://www.youtube.com/watch?v=LwlJTnpJQiE",\n      video_url: "/videos/sample-video.mp4",\n      rating: 8.2,\n      language: "Inglês",\n      maturity_rating: "R"\n    },\n    {\n      title: "Furiosa: Uma Saga Mad Max",\n      description: "Quando o mundo entra em colapso, a jovem Furiosa é sequestrada do Green Place das Muitas Mães e cai nas mãos de uma grande Horda de Motoqueiros liderada pelo Senhor da Guerra Dementus. Atravessando o Deserto, eles encontram a Cidadela presidida por Immortan Joe. Enquanto os dois tiranos lutam pelo domínio, Furiosa deve sobreviver a muitas provações enquanto reúne os meios para encontrar o caminho de volta para casa.",\n      release_year: 2024,\n      duration: 148,\n      genre: "Ação, Aventura, Ficção Científica",\n      director: "George Miller",\n      cast: "Anya Taylor-Joy, Chris Hemsworth, Tom Burke, Yahya Abdul-Mateen II",\n      poster_url: "https://image.tmdb.org/t/p/w500/nz5DxrX4w1e0qfwGxRrMRVN9O3c.jpg",\n      backdrop_url: "https://image.tmdb.org/t/p/original/uLtVbjvS1O7gXL8lUOwsFOH4man.jpg",\n      trailer_url: "https://www.youtube.com/watch?v=XdKzUbAiswE",\n      video_url: "/videos/sample-video.mp4",\n      rating: 7.1,\n      language: "Inglês",\n      maturity_rating: "R"\n    },\n    {\n      title: "Megalópolis",\n      description: "Após um desastre devastador, um arquiteto visionário tenta reconstruir Nova Roma como uma utopia contra a vontade de um político corrupto.",\n      release_year: 2024,\n      duration: 138,\n      genre: "Drama, Ficção Científica",\n      director: "Francis Ford Coppola",\n      cast: "Adam Driver, Giancarlo Esposito, Nathalie Emmanuel, Aubrey Plaza",\n      poster_url: "https://image.tmdb.org/t/p/w500/8NmSiuWKrfwqPGIVBxew6GSzXYD.jpg",\n      backdrop_url: "https://image.tmdb.org/t/p/original/gg4zZoTggZmpAQ32qIrP5dtnkEZ.jpg",\n      trailer_url: "https://www.youtube.com/watch?v=Xow3VSdLYTw",\n      video_url: "/videos/sample-video.mp4",\n      rating: 6.9,\n      language: "Inglês",\n      maturity_rating: "R"\n    },\n    {\n      title: "Nosferatu",\n      description: "Na Alemanha do século 19, uma jovem se torna o objeto de obsessão de um antigo vampiro da Transilvânia. O que se segue é uma história de horror e desejo, enquanto ela é perseguida por um mal inimaginável.",\n      release_year: 2024,\n      duration: 133,\n      genre: "Terror, Fantasia",\n      director: "Robert Eggers",\n      cast: "Bill Skarsgård, Lily-Rose Depp, Nicholas Hoult, Willem Dafoe",\n      poster_url: "https://image.tmdb.org/t/p/w500/gZku2djK7XVjqhdjE0rQkqvcYrG.jpg",\n      backdrop_url: "https://image.tmdb.org/t/p/original/8GnWDLn2AhnmkQ7hlQ9NJUYobSS.jpg",\n      trailer_url: "https://www.youtube.com/watch?v=EIpBl0jG5pc",\n      video_url: "/videos/sample-video.mp4",\n      rating: 7.5,\n      language: "Inglês",\n      maturity_rating: "R"\n    },\n    {\n      title: "Wicked",\n      description: "Muito antes de Dorothy chegar, duas outras garotas se conheceram na Terra de Oz. Elphaba, uma jovem incompreendida devido à sua pele verde, e Glinda, uma jovem popular e privilegiada. \'Wicked\' conta a história de como essas improváveis amigas se tornaram a Bruxa Má do Oeste e a Bruxa Boa do Sul.",\n      release_year: 2024,\n      duration: 160,\n      genre: "Fantasia, Aventura, Musical",\n      director: "Jon M. Chu",\n      cast: "Cynthia Erivo, Ariana Grande, Jonathan Bailey, Jeff Goldblum",\n      poster_url: "https://image.tmdb.org/t/p/w500/zaXdRG8bCfLmD8uyqzDR8zDEJhA.jpg",\n      backdrop_url: "https://image.tmdb.org/t/p/original/xgDj56UWyeWQcxAa0n5QJD5rBOG.jpg",\n      trailer_url: "https://www.youtube.com/watch?v=zfF9TxGz0gE",\n      video_url: "/videos/sample-video.mp4",\n      rating: 8.4,\n      language: "Inglês",\n      maturity_rating: "PG"\n    },\n    {\n      title: "Mufasa: O Rei Leão",\n      description: "A história de origem de Mufasa, contando sua jornada de órfão solitário até se tornar o lendário Rei das Terras do Orgulho, narrada por Rafiki, Timão e Pumba para o jovem filhote de Simba.",\n      release_year: 2024,\n      duration: 120,\n      genre: "Animação, Aventura, Drama",\n      director: "Barry Jenkins",\n      cast: "Aaron Pierre, Kelvin Harrison Jr., Seth Rogen, Billy Eichner",\n      poster_url: "https://image.tmdb.org/t/p/w500/7mbXZXJADOOwxPIQJMYN0uP2QSS.jpg",\n      backdrop_url: "https://image.tmdb.org/t/p/original/eiIXNQBKtj5AA6sPZWjvSZkHnCl.jpg",\n      trailer_url: "https://www.youtube.com/watch?v=NsKkpWxZBWA",\n      video_url: "/videos/sample-video.mp4",\n      rating: 7.8,\n      language: "Inglês",\n      maturity_rating: "PG"\n    }\n  ];\n};\n\n// Query functions for PostgreSQL\nconst pgQuery = async (text, params) => {\n  const client = await pool.connect();\n  try {\n    const result = await client.query(text, params);\n    return result;\n  } finally {\n    client.release();\n  }\n};\n\n// Query functions for SQLite\nconst sqliteQuery = (query, params = []) => {\n  return new Promise((resolve, reject) => {\n    db.all(query, params, (err, rows) => {\n      if (err) {\n        reject(err);\n        return;\n      }\n      resolve(rows);\n    });\n  });\n};\n\n// Query function that works with both databases\nconst query = async (text, params = []) => {\n  if (USE_SQLITE) {\n    return sqliteQuery(text, params);\n  } else {\n    const result = await pgQuery(text, params);\n    return result.rows;\n  }\n};\n\n// Export functions\nmodule.exports = {\n  initializeDatabase,\n  query,\n  USE_SQLITE\n};\n</create-file>\n</function_calls>'}