{'role': 'assistant', 'content': 'Now let\'s create the service files for our Angular application. First, let\'s create the auth service:\n\n<function_calls>\n<create-file file_path="angocine/frontend/angocine/src/app/services/auth.service.ts">\nimport { Injectable } from \'@angular/core\';\nimport { HttpClient } from \'@angular/common/http\';\nimport { BehaviorSubject, Observable, of, throwError } from \'rxjs\';\nimport { catchError, map, tap } from \'rxjs/operators\';\nimport { User, Profile, AuthResponse } from \'../models/user.model\';\nimport { environment } from \'../../environments/environment\';\n\n@Injectable({\n  providedIn: \'root\'\n})\nexport class AuthService {\n  private apiUrl = `${environment.apiUrl}/auth`;\n  private currentUserSubject: BehaviorSubject<User | null>;\n  private currentProfileSubject: BehaviorSubject<Profile | null>;\n  private profilesSubject: BehaviorSubject<Profile[]>;\n  \n  public currentUser$: Observable<User | null>;\n  public currentProfile$: Observable<Profile | null>;\n  public profiles$: Observable<Profile[]>;\n  \n  constructor(private http: HttpClient) {\n    this.currentUserSubject = new BehaviorSubject<User | null>(this.getUserFromStorage());\n    this.currentProfileSubject = new BehaviorSubject<Profile | null>(this.getProfileFromStorage());\n    this.profilesSubject = new BehaviorSubject<Profile[]>(this.getProfilesFromStorage() || []);\n    \n    this.currentUser$ = this.currentUserSubject.asObservable();\n    this.currentProfile$ = this.currentProfileSubject.asObservable();\n    this.profiles$ = this.profilesSubject.asObservable();\n  }\n  \n  // Get current user value\n  public get currentUserValue(): User | null {\n    return this.currentUserSubject.value;\n  }\n  \n  // Get current profile value\n  public get currentProfileValue(): Profile | null {\n    return this.currentProfileSubject.value;\n  }\n  \n  // Get profiles value\n  public get profilesValue(): Profile[] {\n    return this.profilesSubject.value;\n  }\n  \n  // Register new user\n  register(username: string, email: string, password: string): Observable<AuthResponse> {\n    return this.http.post<AuthResponse>(`${this.apiUrl}/register`, { username, email, password })\n      .pipe(\n        tap(response => {\n          if (!response.error && response.data) {\n            this.setAuthData(response.data);\n          }\n        }),\n        catchError(error => {\n          return throwError(() => error);\n        })\n      );\n  }\n  \n  // Login user\n  login(email: string, password: string): Observable<AuthResponse> {\n    return this.http.post<AuthResponse>(`${this.apiUrl}/login`, { email, password })\n      .pipe(\n        tap(response => {\n          if (!response.error && response.data) {\n            this.setAuthData(response.data);\n          }\n        }),\n        catchError(error => {\n          return throwError(() => error);\n        })\n      );\n  }\n  \n  // Refresh token\n  refreshToken(): Observable<any> {\n    const refreshToken = localStorage.getItem(\'refreshToken\');\n    \n    if (!refreshToken) {\n      return throwError(() => new Error(\'No refresh token available\'));\n    }\n    \n    return this.http.post<any>(`${this.apiUrl}/refresh-token`, { refreshToken })\n      .pipe(\n        tap(response => {\n          if (!response.error && response.data) {\n            localStorage.setItem(\'token\', response.data.token);\n          }\n        }),\n        catchError(error => {\n          this.logout();\n          return throwError(() => error);\n        })\n      );\n  }\n  \n  // Forgot password\n  forgotPassword(email: string): Observable<any> {\n    return this.http.post<any>(`${this.apiUrl}/forgot-password`, { email });\n  }\n  \n  // Logout user\n  logout(): void {\n    localStorage.removeItem(\'token\');\n    localStorage.removeItem(\'refreshToken\');\n    localStorage.removeItem(\'user\');\n    localStorage.removeItem(\'currentProfile\');\n    localStorage.removeItem(\'profiles\');\n    this.currentUserSubject.next(null);\n    this.currentProfileSubject.next(null);\n    this.profilesSubject.next([]);\n  }\n  \n  // Check if user is logged in\n  isLoggedIn(): boolean {\n    return !!this.currentUserValue && !!localStorage.getItem(\'token\');\n  }\n  \n  // Check if user is admin\n  isAdmin(): boolean {\n    return this.currentUserValue?.role === \'admin\';\n  }\n  \n  // Set current profile\n  setCurrentProfile(profile: Profile): void {\n    localStorage.setItem(\'currentProfile\', JSON.stringify(profile));\n    this.currentProfileSubject.next(profile);\n  }\n  \n  // Update profiles list\n  updateProfiles(profiles: Profile[]): void {\n    localStorage.setItem(\'profiles\', JSON.stringify(profiles));\n    this.profilesSubject.next(profiles);\n    \n    // If no current profile is set, set the first one\n    if (!this.currentProfileValue && profiles.length > 0) {\n      this.setCurrentProfile(profiles[0]);\n    }\n  }\n  \n  // Get token\n  getToken(): string | null {\n    return localStorage.getItem(\'token\');\n  }\n  \n  // Private helper methods\n  private setAuthData(data: any): void {\n    localStorage.setItem(\'token\', data.token);\n    localStorage.setItem(\'refreshToken\', data.refreshToken);\n    localStorage.setItem(\'user\', JSON.stringify(data.user));\n    \n    this.currentUserSubject.next(data.user);\n    \n    if (data.user.profiles && data.user.profiles.length > 0) {\n      localStorage.setItem(\'profiles\', JSON.stringify(data.user.profiles));\n      this.profilesSubject.next(data.user.profiles);\n      \n      // Set first profile as current if none is set\n      if (!this.currentProfileValue) {\n        this.setCurrentProfile(data.user.profiles[0]);\n      }\n    }\n  }\n  \n  private getUserFromStorage(): User | null {\n    const userJson = localStorage.getItem(\'user\');\n    return userJson ? JSON.parse(userJson) : null;\n  }\n  \n  private getProfileFromStorage(): Profile | null {\n    const profileJson = localStorage.getItem(\'currentProfile\');\n    return profileJson ? JSON.parse(profileJson) : null;\n  }\n  \n  private getProfilesFromStorage(): Profile[] | null {\n    const profilesJson = localStorage.getItem(\'profiles\');\n    return profilesJson ? JSON.parse(profilesJson) : null;\n  }\n}\n</create-file>\n</function_calls>'}