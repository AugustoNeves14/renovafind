{'role': 'assistant', 'content': 'Let\'s create the movie service:\n\n<function_calls>\n<create-file file_path="angocine/frontend/angocine/src/app/services/movie.service.ts">\nimport { Injectable } from \'@angular/core\';\nimport { HttpClient, HttpParams } from \'@angular/common/http\';\nimport { Observable } from \'rxjs\';\nimport { Movie, MovieDetails, MoviesResponse, MovieDetailsResponse, Review } from \'../models/movie.model\';\nimport { environment } from \'../../environments/environment\';\n\n@Injectable({\n  providedIn: \'root\'\n})\nexport class MovieService {\n  private apiUrl = `${environment.apiUrl}/movies`;\n  \n  constructor(private http: HttpClient) { }\n  \n  // Get all movies with pagination and filtering\n  getMovies(\n    page: number = 1, \n    limit: number = 20, \n    genre?: string, \n    year?: number, \n    language?: string, \n    rating?: number, \n    sort: string = \'release_year\', \n    order: string = \'desc\',\n    search?: string\n  ): Observable<MoviesResponse> {\n    let params = new HttpParams()\n      .set(\'page\', page.toString())\n      .set(\'limit\', limit.toString())\n      .set(\'sort\', sort)\n      .set(\'order\', order);\n    \n    if (genre) params = params.set(\'genre\', genre);\n    if (year) params = params.set(\'year\', year.toString());\n    if (language) params = params.set(\'language\', language);\n    if (rating) params = params.set(\'rating\', rating.toString());\n    if (search) params = params.set(\'search\', search);\n    \n    return this.http.get<MoviesResponse>(this.apiUrl, { params });\n  }\n  \n  // Get movie by ID\n  getMovie(id: number): Observable<MovieDetailsResponse> {\n    return this.http.get<MovieDetailsResponse>(`${this.apiUrl}/${id}`);\n  }\n  \n  // Get movie genres (for filters)\n  getGenres(): Observable<{ error: boolean, data: { genres: string[] } }> {\n    return this.http.get<{ error: boolean, data: { genres: string[] } }>(`${this.apiUrl}/filters/genres`);\n  }\n  \n  // Get movie languages (for filters)\n  getLanguages(): Observable<{ error: boolean, data: { languages: string[] } }> {\n    return this.http.get<{ error: boolean, data: { languages: string[] } }>(`${this.apiUrl}/filters/languages`);\n  }\n  \n  // Get movie years (for filters)\n  getYears(): Observable<{ error: boolean, data: { years: number[] } }> {\n    return this.http.get<{ error: boolean, data: { years: number[] } }>(`${this.apiUrl}/filters/years`);\n  }\n  \n  // Add review to movie\n  addReview(movieId: number, rating: number, comment?: string): Observable<{ error: boolean, message: string }> {\n    return this.http.post<{ error: boolean, message: string }>(\n      `${this.apiUrl}/${movieId}/reviews`, \n      { rating, comment }\n    );\n  }\n  \n  // Search movies\n  searchMovies(query: string, limit: number = 10): Observable<{ error: boolean, data: { movies: Movie[] } }> {\n    const params = new HttpParams()\n      .set(\'q\', query)\n      .set(\'limit\', limit.toString());\n    \n    return this.http.get<{ error: boolean, data: { movies: Movie[] } }>(\n      `${this.apiUrl}/search/query`, \n      { params }\n    );\n  }\n  \n  // Extract YouTube video ID from URL\n  extractYoutubeId(url: string): string | null {\n    const regExp = /^.*(youtu.be\\/|v\\/|u\\/\\w\\/|embed\\/|watch\\?v=|&v=)([^#&?]*).*/;\n    const match = url.match(regExp);\n    return (match && match[2].length === 11) ? match[2] : null;\n  }\n  \n  // Get YouTube thumbnail URL\n  getYoutubeThumbnail(url: string): string {\n    const videoId = this.extractYoutubeId(url);\n    return videoId ? `https://img.youtube.com/vi/${videoId}/maxresdefault.jpg` : \'\';\n  }\n  \n  // Format movie duration\n  formatDuration(minutes: number): string {\n    if (!minutes) return \'\';\n    const hours = Math.floor(minutes / 60);\n    const mins = minutes % 60;\n    return hours > 0 ? `${hours}h ${mins}m` : `${mins}m`;\n  }\n  \n  // Get movie genres as array\n  getGenresArray(genreString?: string): string[] {\n    if (!genreString) return [];\n    return genreString.split(\',\').map(genre => genre.trim());\n  }\n}\n</create-file>\n</function_calls>'}