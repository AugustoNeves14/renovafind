{'role': 'assistant', 'content': 'Let\'s create the analytics service:\n\n<function_calls>\n<create-file file_path="angocine/frontend/angocine/src/app/services/analytics.service.ts">\nimport { Injectable } from \'@angular/core\';\nimport { HttpClient } from \'@angular/common/http\';\nimport { Observable } from \'rxjs\';\nimport { environment } from \'../../environments/environment\';\n\n@Injectable({\n  providedIn: \'root\'\n})\nexport class AnalyticsService {\n  private apiUrl = `${environment.apiUrl}/analytics`;\n  \n  constructor(private http: HttpClient) { }\n  \n  // Record analytics event\n  recordEvent(profileId: number, eventType: string, movieId?: number, eventData?: any): Observable<{ \n    error: boolean, \n    message: string \n  }> {\n    return this.http.post<{ error: boolean, message: string }>(\n      `${this.apiUrl}/event`, \n      { profile_id: profileId, movie_id: movieId, event_type: eventType, event_data: eventData }\n    );\n  }\n  \n  // Get user activity for a profile\n  getUserActivity(profileId: number): Observable<{ \n    error: boolean, \n    data: { \n      activity: {\n        id: number,\n        description: string,\n        event_type: string,\n        movie: {\n          id: number,\n          title: string,\n          poster_url: string\n        } | null,\n        created_at: string\n      }[] \n    } \n  }> {\n    return this.http.get<any>(`${this.apiUrl}/activity/${profileId}`);\n  }\n  \n  // Get watch time statistics for a profile\n  getWatchTimeStats(profileId: number): Observable<{ \n    error: boolean, \n    data: { \n      total_watch_time: {\n        seconds: number,\n        hours: number,\n        minutes: number,\n        formatted: string\n      },\n      watch_time_by_genre: {\n        genre: string,\n        total_seconds: number,\n        hours: number,\n        percentage: number\n      }[]\n    } \n  }> {\n    return this.http.get<any>(`${this.apiUrl}/watch-time/${profileId}`);\n  }\n  \n  // Record movie start event\n  recordMovieStart(profileId: number, movieId: number): Observable<{ error: boolean, message: string }> {\n    return this.recordEvent(profileId, \'movie_started\', movieId);\n  }\n  \n  // Record movie progress event\n  recordMovieProgress(profileId: number, movieId: number, watchTime: number): Observable<{ error: boolean, message: string }> {\n    return this.recordEvent(profileId, \'movie_progress\', movieId, { watch_time: watchTime });\n  }\n  \n  // Record movie completed event\n  recordMovieCompleted(profileId: number, movieId: number): Observable<{ error: boolean, message: string }> {\n    return this.recordEvent(profileId, \'movie_completed\', movieId);\n  }\n  \n  // Record movie rated event\n  recordMovieRated(profileId: number, movieId: number, rating: number): Observable<{ error: boolean, message: string }> {\n    return this.recordEvent(profileId, \'movie_rated\', movieId, { rating });\n  }\n  \n  // Record search event\n  recordSearch(profileId: number, query: string): Observable<{ error: boolean, message: string }> {\n    return this.recordEvent(profileId, \'search\', undefined, { query });\n  }\n  \n  // Record watchlist add event\n  recordWatchlistAdd(profileId: number, movieId: number): Observable<{ error: boolean, message: string }> {\n    return this.recordEvent(profileId, \'movie_added_to_watchlist\', movieId);\n  }\n  \n  // Record watchlist remove event\n  recordWatchlistRemove(profileId: number, movieId: number): Observable<{ error: boolean, message: string }> {\n    return this.recordEvent(profileId, \'movie_removed_from_watchlist\', movieId);\n  }\n}\n</create-file>\n</function_calls>'}