{'role': 'assistant', 'content': 'Let\'s create the profile page component:\n\n<function_calls>\n<create-file file_path="angocine/frontend/angocine/src/app/pages/profile/profile.component.ts">\nimport { Component, OnInit } from \'@angular/core\';\nimport { Router, ActivatedRoute } from \'@angular/router\';\nimport { FormBuilder, FormGroup, Validators } from \'@angular/forms\';\nimport { UserService } from \'../../services/user.service\';\nimport { AuthService } from \'../../services/auth.service\';\nimport { AnalyticsService } from \'../../services/analytics.service\';\nimport { User, Profile } from \'../../models/user.model\';\nimport { WatchHistoryItem, WatchlistItem } from \'../../models/movie.model\';\n\n@Component({\n  selector: \'app-profile\',\n  templateUrl: \'./profile.component.html\',\n  styleUrls: [\'./profile.component.scss\']\n})\nexport class ProfileComponent implements OnInit {\n  currentUser: User | null = null;\n  currentProfile: Profile | null = null;\n  profiles: Profile[] = [];\n  \n  watchlist: WatchlistItem[] = [];\n  watchHistory: WatchHistoryItem[] = [];\n  \n  userForm: FormGroup;\n  profileForm: FormGroup;\n  \n  isLoading = true;\n  isLoadingWatchlist = false;\n  isLoadingHistory = false;\n  isUpdatingUser = false;\n  isUpdatingProfile = false;\n  isCreatingProfile = false;\n  isDeletingProfile = false;\n  \n  error: string | null = null;\n  userUpdateError: string | null = null;\n  profileUpdateError: string | null = null;\n  \n  activeTab = \'profile\';\n  showProfileSelector = false;\n  showAddProfileForm = false;\n  showEditProfileForm = false;\n  profileToEdit: Profile | null = null;\n  \n  constructor(\n    private userService: UserService,\n    private authService: AuthService,\n    private analyticsService: AnalyticsService,\n    private router: Router,\n    private route: ActivatedRoute,\n    private fb: FormBuilder\n  ) {\n    // Initialize forms\n    this.userForm = this.fb.group({\n      username: [\'\', [Validators.required, Validators.minLength(3)]],\n      email: [\'\', [Validators.required, Validators.email]],\n      current_password: [\'\'],\n      new_password: [\'\'],\n      confirm_password: [\'\']\n    });\n    \n    this.profileForm = this.fb.group({\n      name: [\'\', [Validators.required, Validators.minLength(2)]],\n      avatar: [\'\'],\n      is_kid: [false]\n    });\n  }\n  \n  ngOnInit(): void {\n    // Check if user is logged in\n    this.authService.currentUser$.subscribe(user => {\n      this.currentUser = user;\n      \n      if (!user) {\n        this.router.navigate([\'/auth/login\'], { queryParams: { returnUrl: \'/profile\' } });\n        return;\n      }\n      \n      // Load user data\n      this.loadUserData();\n    });\n    \n    // Get current profile\n    this.authService.currentProfile$.subscribe(profile => {\n      this.currentProfile = profile;\n      \n      if (profile) {\n        // Load watchlist and history\n        this.loadWatchlist();\n        this.loadWatchHistory();\n      }\n    });\n    \n    // Check for tab in query params\n    this.route.queryParams.subscribe(params => {\n      if (params[\'tab\']) {\n        this.activeTab = params[\'tab\'];\n      }\n    });\n  }\n  \n  loadUserData(): void {\n    this.isLoading = true;\n    \n    this.userService.getProfile().subscribe(\n      response => {\n        // Update user form\n        this.userForm.patchValue({\n          username: response.data.user.username,\n          email: response.data.user.email\n        });\n        \n        // Update profiles\n        this.profiles = response.data.profiles;\n        this.authService.updateProfiles(response.data.profiles);\n        \n        this.isLoading = false;\n      },\n      error => {\n        console.error(\'Error loading user data:\', error);\n        this.error = \'Erro ao carregar dados do usuário. Por favor, tente novamente mais tarde.\';\n        this.isLoading = false;\n      }\n    );\n  }\n  \n  loadWatchlist(): void {\n    if (!this.currentProfile) return;\n    \n    this.isLoadingWatchlist = true;\n    \n    this.userService.getWatchlist().subscribe(\n      response => {\n        this.watchlist = response.data.watchlist;\n        this.isLoadingWatchlist = false;\n      },\n      error => {\n        console.error(\'Error loading watchlist:\', error);\n        this.isLoadingWatchlist = false;\n      }\n    );\n  }\n  \n  loadWatchHistory(): void {\n    if (!this.currentProfile) return;\n    \n    this.isLoadingHistory = true;\n    \n    this.userService.getWatchHistory(this.currentProfile.id).subscribe(\n      response => {\n        this.watchHistory = response.data.history;\n        this.isLoadingHistory = false;\n      },\n      error => {\n        console.error(\'Error loading watch history:\', error);\n        this.isLoadingHistory = false;\n      }\n    );\n  }\n  \n  updateUserProfile(): void {\n    if (this.userForm.invalid) return;\n    \n    const formData = this.userForm.value;\n    \n    // Validate passwords if changing\n    if (formData.new_password) {\n      if (!formData.current_password) {\n        this.userUpdateError = \'Por favor, informe sua senha atual para alterá-la.\';\n        return;\n      }\n      \n      if (formData.new_password !== formData.confirm_password) {\n        this.userUpdateError = \'A nova senha e a confirmação não coincidem.\';\n        return;\n      }\n    }\n    \n    this.isUpdatingUser = true;\n    this.userUpdateError = null;\n    \n    // Prepare data for update\n    const updateData: any = {\n      username: formData.username,\n      email: formData.email\n    };\n    \n    if (formData.new_password) {\n      updateData.current_password = formData.current_password;\n      updateData.new_password = formData.new_password;\n    }\n    \n    this.userService.updateProfile(updateData).subscribe(\n      response => {\n        this.isUpdatingUser = false;\n        \n        // Reset password fields\n        this.userForm.patchValue({\n          current_password: \'\',\n          new_password: \'\',\n          confirm_password: \'\'\n        });\n        \n        // Reload user data\n        this.loadUserData();\n      },\n      error => {\n        console.error(\'Error updating user profile:\', error);\n        this.userUpdateError = \'Erro ao atualizar perfil. Verifique os dados e tente novamente.\';\n        this.isUpdatingUser = false;\n      }\n    );\n  }\n  \n  openProfileSelector(): void {\n    this.showProfileSelector = true;\n  }\n  \n  closeProfileSelector(): void {\n    this.showProfileSelector = false;\n  }\n  \n  selectProfile(profile: Profile): void {\n    this.authService.setCurrentProfile(profile);\n    this.closeProfileSelector();\n    \n    // Reload watchlist and history\n    this.loadWatchlist();\n    this.loadWatchHistory();\n  }\n  \n  openAddProfileForm(): void {\n    this.showAddProfileForm = true;\n    this.profileForm.reset({\n      name: \'\',\n      avatar: `https://i.pravatar.cc/150?img=${Math.floor(Math.random() * 70)}`,\n      is_kid: false\n    });\n  }\n  \n  closeAddProfileForm(): void {\n    this.showAddProfileForm = false;\n  }\n  \n  createProfile(): void {\n    if (this.profileForm.invalid) return;\n    \n    const formData = this.profileForm.value;\n    \n    this.isCreatingProfile = true;\n    this.profileUpdateError = null;\n    \n    this.userService.createProfile(formData.name, formData.avatar, formData.is_kid).subscribe(\n      response => {\n        this.isCreatingProfile = false;\n        this.closeAddProfileForm();\n        \n        // Reload user data\n        this.loadUserData();\n        \n        // If no current profile, set this as current\n        if (!this.currentProfile) {\n          this.selectProfile(response.data.profile);\n        }\n      },\n      error => {\n        console.error(\'Error creating profile:\', error);\n        this.profileUpdateError = \'Erro ao criar perfil. Por favor, tente novamente.\';\n        this.isCreatingProfile = false;\n      }\n    );\n  }\n  \n  openEditProfileForm(profile: Profile): void {\n    this.profileToEdit = profile;\n    this.showEditProfileForm = true;\n    \n    this.profileForm.patchValue({\n      name: profile.name,\n      avatar: profile.avatar,\n      is_kid: profile.is_kid\n    });\n  }\n  \n  closeEditProfileForm(): void {\n    this.showEditProfileForm = false;\n    this.profileToEdit = null;\n  }\n  \n  updateProfile(): void {\n    if (this.profileForm.invalid || !this.profileToEdit) return;\n    \n    const formData = this.profileForm.value;\n    \n    this.isUpdatingProfile = true;\n    this.profileUpdateError = null;\n    \n    this.userService.updateProfile(this.profileToEdit.id, {\n      name: formData.name,\n      avatar: formData.avatar,\n      is_kid: formData.is_kid\n    }).subscribe(\n      response => {\n        this.isUpdatingProfile = false;\n        this.closeEditProfileForm();\n        \n        // Reload user data\n        this.loadUserData();\n        \n        // If this is the current profile, update it\n        if (this.currentProfile && this.currentProfile.id === this.profileToEdit?.id) {\n          this.selectProfile(response.data.profile);\n        }\n      },\n      error => {\n        console.error(\'Error updating profile:\', error);\n        this.profileUpdateError = \'Erro ao atualizar perfil. Por favor, tente novamente.\';\n        this.isUpdatingProfile = false;\n      }\n    );\n  }\n  \n  deleteProfile(profile: Profile): void {\n    if (confirm(`Tem certeza que deseja excluir o perfil "${profile.name}"? Esta ação não pode ser desfeita.`)) {\n      this.isDeletingProfile = true;\n      \n      this.userService.deleteProfile(profile.id).subscribe(\n        response => {\n          this.isDeletingProfile = false;\n          \n          // Reload user data\n          this.loadUserData();\n          \n          // If this is the current profile, clear it\n          if (this.currentProfile && this.currentProfile.id === profile.id) {\n            // Select another profile if available\n            if (this.profiles.length > 1) {\n              const otherProfile = this.profiles.find(p => p.id !== profile.id);\n              if (otherProfile) {\n                this.selectProfile(otherProfile);\n              }\n            } else {\n              // No profiles left\n              this.authService.setCurrentProfile(null);\n              this.currentProfile = null;\n            }\n          }\n        },\n        error => {\n          console.error(\'Error deleting profile:\', error);\n          alert(\'Erro ao excluir perfil. Por favor, tente novamente.\');\n          this.isDeletingProfile = false;\n        }\n      );\n    }\n  }\n  \n  setActiveTab(tab: string): void {\n    this.activeTab = tab;\n    \n    // Update URL\n    this.router.navigate([], {\n      relativeTo: this.route,\n      queryParams: { tab },\n      queryParamsHandling: \'merge\'\n    });\n  }\n  \n  logout(): void {\n    this.authService.logout();\n    this.router.navigate([\'/\']);\n  }\n}\n</create-file>\n</function_calls>'}