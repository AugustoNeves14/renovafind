{'role': 'assistant', 'content': 'Let\'s create the HTTP interceptor for handling authentication tokens:\n\n<function_calls>\n<create-file file_path="angocine/frontend/angocine/src/app/interceptors/auth.interceptor.ts">\nimport { Injectable } from \'@angular/core\';\nimport {\n  HttpRequest,\n  HttpHandler,\n  HttpEvent,\n  HttpInterceptor,\n  HttpErrorResponse\n} from \'@angular/common/http\';\nimport { Observable, throwError, BehaviorSubject } from \'rxjs\';\nimport { catchError, filter, take, switchMap } from \'rxjs/operators\';\nimport { AuthService } from \'../services/auth.service\';\n\n@Injectable()\nexport class AuthInterceptor implements HttpInterceptor {\n  private isRefreshing = false;\n  private refreshTokenSubject: BehaviorSubject<any> = new BehaviorSubject<any>(null);\n\n  constructor(private authService: AuthService) {}\n\n  intercept(request: HttpRequest<unknown>, next: HttpHandler): Observable<HttpEvent<unknown>> {\n    // Add auth token to request if available\n    const token = this.authService.getToken();\n    \n    if (token) {\n      request = this.addToken(request, token);\n    }\n\n    return next.handle(request).pipe(\n      catchError(error => {\n        if (error instanceof HttpErrorResponse && error.status === 401) {\n          return this.handle401Error(request, next);\n        }\n        \n        return throwError(() => error);\n      })\n    );\n  }\n\n  private addToken(request: HttpRequest<any>, token: string): HttpRequest<any> {\n    return request.clone({\n      setHeaders: {\n        Authorization: `Bearer ${token}`\n      }\n    });\n  }\n\n  private handle401Error(request: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\n    if (!this.isRefreshing) {\n      this.isRefreshing = true;\n      this.refreshTokenSubject.next(null);\n\n      return this.authService.refreshToken().pipe(\n        switchMap((response) => {\n          this.isRefreshing = false;\n          this.refreshTokenSubject.next(response.data.token);\n          \n          return next.handle(this.addToken(request, response.data.token));\n        }),\n        catchError((error) => {\n          this.isRefreshing = false;\n          \n          // If refresh token fails, logout user\n          this.authService.logout();\n          return throwError(() => error);\n        })\n      );\n    } else {\n      return this.refreshTokenSubject.pipe(\n        filter(token => token !== null),\n        take(1),\n        switchMap(token => next.handle(this.addToken(request, token)))\n      );\n    }\n  }\n}\n</create-file>\n</function_calls>'}