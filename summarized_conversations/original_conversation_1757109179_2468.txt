{'role': 'assistant', 'content': 'Let\'s create the register component:\n\n<function_calls>\n<create-file file_path="angocine/frontend/angocine/src/app/pages/auth/register/register.component.ts">\nimport { Component, OnInit } from \'@angular/core\';\nimport { FormBuilder, FormGroup, Validators } from \'@angular/forms\';\nimport { Router } from \'@angular/router\';\nimport { AuthService } from \'../../../services/auth.service\';\n\n@Component({\n  selector: \'app-register\',\n  templateUrl: \'./register.component.html\',\n  styleUrls: [\'./register.component.scss\']\n})\nexport class RegisterComponent implements OnInit {\n  registerForm: FormGroup;\n  isSubmitting = false;\n  error: string | null = null;\n  \n  constructor(\n    private fb: FormBuilder,\n    private authService: AuthService,\n    private router: Router\n  ) {\n    // Initialize form\n    this.registerForm = this.fb.group({\n      username: [\'\', [Validators.required, Validators.minLength(3)]],\n      email: [\'\', [Validators.required, Validators.email]],\n      password: [\'\', [Validators.required, Validators.minLength(6)]],\n      confirmPassword: [\'\', [Validators.required]]\n    }, {\n      validators: this.passwordMatchValidator\n    });\n    \n    // Redirect if already logged in\n    if (this.authService.isLoggedIn()) {\n      this.router.navigate([\'/\']);\n    }\n  }\n  \n  ngOnInit(): void {}\n  \n  // Custom validator to check if passwords match\n  passwordMatchValidator(form: FormGroup) {\n    const password = form.get(\'password\')?.value;\n    const confirmPassword = form.get(\'confirmPassword\')?.value;\n    \n    if (password !== confirmPassword) {\n      form.get(\'confirmPassword\')?.setErrors({ passwordMismatch: true });\n      return { passwordMismatch: true };\n    } else {\n      form.get(\'confirmPassword\')?.setErrors(null);\n      return null;\n    }\n  }\n  \n  onSubmit(): void {\n    // Stop here if form is invalid\n    if (this.registerForm.invalid) {\n      return;\n    }\n    \n    this.isSubmitting = true;\n    this.error = null;\n    \n    const { username, email, password } = this.registerForm.value;\n    \n    this.authService.register(username, email, password).subscribe(\n      response => {\n        this.isSubmitting = false;\n        \n        // Navigate to profile selection\n        this.router.navigate([\'/profile\']);\n      },\n      error => {\n        this.isSubmitting = false;\n        \n        if (error.status === 409) {\n          this.error = \'Este email ou nome de usuário já está em uso. Por favor, tente outro.\';\n        } else {\n          this.error = \'Ocorreu um erro ao criar sua conta. Por favor, tente novamente mais tarde.\';\n        }\n        \n        console.error(\'Registration error:\', error);\n      }\n    );\n  }\n}\n</create-file>\n</function_calls>'}