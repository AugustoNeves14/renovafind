{'role': 'assistant', 'content': 'Let\'s create the admin service:\n\n<function_calls>\n<create-file file_path="angocine/frontend/angocine/src/app/services/admin.service.ts">\nimport { Injectable } from \'@angular/core\';\nimport { HttpClient, HttpParams } from \'@angular/common/http\';\nimport { Observable } from \'rxjs\';\nimport { Movie } from \'../models/movie.model\';\nimport { environment } from \'../../environments/environment\';\n\n@Injectable({\n  providedIn: \'root\'\n})\nexport class AdminService {\n  private apiUrl = `${environment.apiUrl}/admin`;\n  \n  constructor(private http: HttpClient) { }\n  \n  // Get dashboard stats\n  getDashboardStats(): Observable<{ \n    error: boolean, \n    data: { \n      stats: { \n        total_users: number, \n        total_movies: number, \n        total_profiles: number, \n        total_reviews: number, \n        total_events: number \n      }, \n      recent_users: any[], \n      top_rated_movies: any[], \n      recent_reviews: any[] \n    } \n  }> {\n    return this.http.get<any>(`${this.apiUrl}/dashboard`);\n  }\n  \n  // Get all users (with pagination)\n  getUsers(page: number = 1, limit: number = 20, search?: string): Observable<{ \n    error: boolean, \n    data: { \n      users: any[], \n      pagination: { \n        total: number, \n        page: number, \n        limit: number, \n        pages: number \n      } \n    } \n  }> {\n    let params = new HttpParams()\n      .set(\'page\', page.toString())\n      .set(\'limit\', limit.toString());\n    \n    if (search) params = params.set(\'search\', search);\n    \n    return this.http.get<any>(`${this.apiUrl}/users`, { params });\n  }\n  \n  // Get user details\n  getUserDetails(userId: number): Observable<{ \n    error: boolean, \n    data: { \n      user: any, \n      profiles: any[], \n      reviews: any[], \n      stats: { \n        profile_count: number, \n        review_count: number, \n        watchlist_count: number \n      } \n    } \n  }> {\n    return this.http.get<any>(`${this.apiUrl}/users/${userId}`);\n  }\n  \n  // Update user role\n  updateUserRole(userId: number, role: string): Observable<{ error: boolean, message: string }> {\n    return this.http.put<{ error: boolean, message: string }>(`${this.apiUrl}/users/${userId}/role`, { role });\n  }\n  \n  // Delete user\n  deleteUser(userId: number): Observable<{ error: boolean, message: string }> {\n    return this.http.delete<{ error: boolean, message: string }>(`${this.apiUrl}/users/${userId}`);\n  }\n  \n  // Get all movies (with pagination)\n  getMovies(page: number = 1, limit: number = 20, search?: string): Observable<{ \n    error: boolean, \n    data: { \n      movies: any[], \n      pagination: { \n        total: number, \n        page: number, \n        limit: number, \n        pages: number \n      } \n    } \n  }> {\n    let params = new HttpParams()\n      .set(\'page\', page.toString())\n      .set(\'limit\', limit.toString());\n    \n    if (search) params = params.set(\'search\', search);\n    \n    return this.http.get<any>(`${this.apiUrl}/movies`, { params });\n  }\n  \n  // Get movie details\n  getMovieDetails(movieId: number): Observable<{ \n    error: boolean, \n    data: { \n      movie: Movie, \n      stats: { \n        review_count: number, \n        watchlist_count: number, \n        history_count: number \n      } \n    } \n  }> {\n    return this.http.get<any>(`${this.apiUrl}/movies/${movieId}`);\n  }\n  \n  // Create movie\n  createMovie(movieData: any): Observable<{ error: boolean, message: string, data: { movie: Movie } }> {\n    return this.http.post<any>(`${this.apiUrl}/movies`, movieData);\n  }\n  \n  // Update movie\n  updateMovie(movieId: number, movieData: any): Observable<{ error: boolean, message: string, data: { movie: Movie } }> {\n    return this.http.put<any>(`${this.apiUrl}/movies/${movieId}`, movieData);\n  }\n  \n  // Delete movie\n  deleteMovie(movieId: number): Observable<{ error: boolean, message: string }> {\n    return this.http.delete<{ error: boolean, message: string }>(`${this.apiUrl}/movies/${movieId}`);\n  }\n  \n  // Get all reviews (with pagination)\n  getReviews(page: number = 1, limit: number = 20): Observable<{ \n    error: boolean, \n    data: { \n      reviews: any[], \n      pagination: { \n        total: number, \n        page: number, \n        limit: number, \n        pages: number \n      } \n    } \n  }> {\n    const params = new HttpParams()\n      .set(\'page\', page.toString())\n      .set(\'limit\', limit.toString());\n    \n    return this.http.get<any>(`${this.apiUrl}/reviews`, { params });\n  }\n  \n  // Delete review\n  deleteReview(reviewId: number): Observable<{ error: boolean, message: string }> {\n    return this.http.delete<{ error: boolean, message: string }>(`${this.apiUrl}/reviews/${reviewId}`);\n  }\n  \n  // Get analytics data\n  getAnalytics(period: \'day\' | \'week\' | \'month\' | \'year\' = \'week\'): Observable<{ \n    error: boolean, \n    data: { \n      event_counts: any[], \n      top_movies: any[], \n      user_registrations: any[], \n      completion_rate: number \n    } \n  }> {\n    const params = new HttpParams().set(\'period\', period);\n    \n    return this.http.get<any>(`${this.apiUrl}/analytics`, { params });\n  }\n}\n</create-file>\n</function_calls>'}