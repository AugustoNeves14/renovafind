{'role': 'assistant', 'content': 'Let\'s create the movie details page component:\n\n<function_calls>\n<create-file file_path="angocine/frontend/angocine/src/app/pages/movie-details/movie-details.component.ts">\nimport { Component, OnInit } from \'@angular/core\';\nimport { ActivatedRoute, Router } from \'@angular/router\';\nimport { DomSanitizer, SafeResourceUrl } from \'@angular/platform-browser\';\nimport { MovieService } from \'../../services/movie.service\';\nimport { AuthService } from \'../../services/auth.service\';\nimport { AnalyticsService } from \'../../services/analytics.service\';\nimport { Movie, MovieDetails, Review } from \'../../models/movie.model\';\nimport { Profile } from \'../../models/user.model\';\n\n@Component({\n  selector: \'app-movie-details\',\n  templateUrl: \'./movie-details.component.html\',\n  styleUrls: [\'./movie-details.component.scss\']\n})\nexport class MovieDetailsComponent implements OnInit {\n  movie: MovieDetails | null = null;\n  similarMovies: Movie[] = [];\n  reviews: Review[] = [];\n  \n  isLoading = true;\n  error: string | null = null;\n  \n  showTrailer = false;\n  trailerUrl: SafeResourceUrl | null = null;\n  \n  userRating = 0;\n  userReview = \'\';\n  isSubmittingReview = false;\n  reviewError: string | null = null;\n  \n  isLoggedIn = false;\n  currentProfile: Profile | null = null;\n  \n  constructor(\n    private route: ActivatedRoute,\n    private router: Router,\n    private movieService: MovieService,\n    private authService: AuthService,\n    private analyticsService: AnalyticsService,\n    private sanitizer: DomSanitizer\n  ) {}\n  \n  ngOnInit(): void {\n    this.route.paramMap.subscribe(params => {\n      const id = params.get(\'id\');\n      if (id) {\n        this.loadMovie(parseInt(id));\n      } else {\n        this.router.navigate([\'/\']);\n      }\n    });\n    \n    this.authService.currentUser$.subscribe(user => {\n      this.isLoggedIn = !!user;\n    });\n    \n    this.authService.currentProfile$.subscribe(profile => {\n      this.currentProfile = profile;\n    });\n  }\n  \n  loadMovie(id: number): void {\n    this.isLoading = true;\n    \n    this.movieService.getMovie(id).subscribe(\n      response => {\n        this.movie = response.data.movie;\n        this.reviews = response.data.reviews;\n        this.similarMovies = response.data.similar_movies;\n        \n        // Prepare trailer URL if available\n        if (this.movie.trailer_url) {\n          this.prepareTrailerUrl(this.movie.trailer_url);\n        }\n        \n        this.isLoading = false;\n        \n        // Record analytics event\n        if (this.currentProfile) {\n          this.analyticsService.recordEvent(\n            this.currentProfile.id,\n            \'movie_viewed\',\n            this.movie.id\n          ).subscribe();\n        }\n      },\n      error => {\n        console.error(\'Error loading movie:\', error);\n        this.error = \'Erro ao carregar detalhes do filme. Por favor, tente novamente mais tarde.\';\n        this.isLoading = false;\n      }\n    );\n  }\n  \n  prepareTrailerUrl(url: string): void {\n    const videoId = this.movieService.extractYoutubeId(url);\n    if (videoId) {\n      this.trailerUrl = this.sanitizer.bypassSecurityTrustResourceUrl(\n        `https://www.youtube.com/embed/${videoId}?autoplay=1&mute=0&controls=1&modestbranding=1&rel=0`\n      );\n    }\n  }\n  \n  openTrailer(): void {\n    this.showTrailer = true;\n  }\n  \n  closeTrailer(): void {\n    this.showTrailer = false;\n  }\n  \n  watchMovie(): void {\n    if (!this.movie) return;\n    \n    if (this.isLoggedIn && this.currentProfile) {\n      this.router.navigate([\'/watch\', this.movie.id]);\n    } else if (this.isLoggedIn) {\n      this.router.navigate([\'/profile\']);\n    } else {\n      this.router.navigate([\'/auth/login\'], { queryParams: { returnUrl: `/watch/${this.movie.id}` } });\n    }\n  }\n  \n  submitReview(): void {\n    if (!this.movie || !this.isLoggedIn || !this.currentProfile) return;\n    \n    if (this.userRating === 0) {\n      this.reviewError = \'Por favor, selecione uma avaliação de 1 a 5 estrelas.\';\n      return;\n    }\n    \n    this.isSubmittingReview = true;\n    this.reviewError = null;\n    \n    this.movieService.addReview(this.movie.id, this.userRating, this.userReview).subscribe(\n      response => {\n        // Reload movie to get updated reviews\n        this.loadMovie(this.movie!.id);\n        \n        // Reset form\n        this.userRating = 0;\n        this.userReview = \'\';\n        this.isSubmittingReview = false;\n        \n        // Record analytics event\n        if (this.currentProfile) {\n          this.analyticsService.recordMovieRated(\n            this.currentProfile.id,\n            this.movie!.id,\n            this.userRating\n          ).subscribe();\n        }\n      },\n      error => {\n        console.error(\'Error submitting review:\', error);\n        this.reviewError = \'Erro ao enviar avaliação. Por favor, tente novamente.\';\n        this.isSubmittingReview = false;\n      }\n    );\n  }\n  \n  getGenres(): string[] {\n    if (!this.movie || !this.movie.genre) return [];\n    return this.movieService.getGenresArray(this.movie.genre);\n  }\n  \n  formatDuration(): string {\n    if (!this.movie || !this.movie.duration) return \'\';\n    return this.movieService.formatDuration(this.movie.duration);\n  }\n  \n  getBackdropUrl(): string {\n    if (!this.movie || !this.movie.backdrop_url) {\n      return \'assets/images/backdrop-placeholder.jpg\';\n    }\n    return this.movie.backdrop_url;\n  }\n  \n  getPosterUrl(): string {\n    if (!this.movie || !this.movie.poster_url) {\n      return \'assets/images/poster-placeholder.jpg\';\n    }\n    return this.movie.poster_url;\n  }\n}\n</create-file>\n</function_calls>'}