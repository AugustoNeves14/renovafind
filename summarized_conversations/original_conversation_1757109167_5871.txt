{'role': 'assistant', 'content': 'Let\'s create the watch page component:\n\n<function_calls>\n<create-file file_path="angocine/frontend/angocine/src/app/pages/watch/watch.component.ts">\nimport { Component, OnInit, OnDestroy } from \'@angular/core\';\nimport { ActivatedRoute, Router } from \'@angular/router\';\nimport { MovieService } from \'../../services/movie.service\';\nimport { UserService } from \'../../services/user.service\';\nimport { AuthService } from \'../../services/auth.service\';\nimport { AnalyticsService } from \'../../services/analytics.service\';\nimport { Movie } from \'../../models/movie.model\';\nimport { Profile } from \'../../models/user.model\';\nimport { Subscription, interval } from \'rxjs\';\n\n@Component({\n  selector: \'app-watch\',\n  templateUrl: \'./watch.component.html\',\n  styleUrls: [\'./watch.component.scss\']\n})\nexport class WatchComponent implements OnInit, OnDestroy {\n  movie: Movie | null = null;\n  currentProfile: Profile | null = null;\n  \n  isLoading = true;\n  error: string | null = null;\n  \n  watchTime = 0;\n  isCompleted = false;\n  progressUpdateInterval: Subscription | null = null;\n  \n  constructor(\n    private route: ActivatedRoute,\n    private router: Router,\n    private movieService: MovieService,\n    private userService: UserService,\n    private authService: AuthService,\n    private analyticsService: AnalyticsService\n  ) {}\n  \n  ngOnInit(): void {\n    // Check if user is logged in and has a profile\n    this.authService.currentProfile$.subscribe(profile => {\n      this.currentProfile = profile;\n      \n      if (!profile) {\n        this.router.navigate([\'/profile\']);\n        return;\n      }\n      \n      // Load movie\n      this.route.paramMap.subscribe(params => {\n        const id = params.get(\'id\');\n        if (id) {\n          this.loadMovie(parseInt(id));\n        } else {\n          this.router.navigate([\'/\']);\n        }\n      });\n    });\n    \n    // Set up progress update interval (every 30 seconds)\n    this.progressUpdateInterval = interval(30000).subscribe(() => {\n      this.updateWatchProgress();\n    });\n  }\n  \n  ngOnDestroy(): void {\n    // Save progress when leaving the page\n    this.updateWatchProgress();\n    \n    // Clear interval\n    if (this.progressUpdateInterval) {\n      this.progressUpdateInterval.unsubscribe();\n    }\n  }\n  \n  loadMovie(id: number): void {\n    this.isLoading = true;\n    \n    this.movieService.getMovie(id).subscribe(\n      response => {\n        this.movie = response.data.movie;\n        this.isLoading = false;\n        \n        // Record analytics event\n        if (this.currentProfile) {\n          this.analyticsService.recordMovieStart(this.currentProfile.id, this.movie.id).subscribe();\n        }\n      },\n      error => {\n        console.error(\'Error loading movie:\', error);\n        this.error = \'Erro ao carregar o filme. Por favor, tente novamente mais tarde.\';\n        this.isLoading = false;\n      }\n    );\n  }\n  \n  onTimeUpdate(time: number): void {\n    this.watchTime = Math.floor(time);\n  }\n  \n  onVideoEnded(): void {\n    this.isCompleted = true;\n    this.updateWatchProgress(true);\n    \n    // Record analytics event\n    if (this.currentProfile && this.movie) {\n      this.analyticsService.recordMovieCompleted(this.currentProfile.id, this.movie.id).subscribe();\n    }\n  }\n  \n  onVideoStarted(): void {\n    // Record analytics event\n    if (this.currentProfile && this.movie) {\n      this.analyticsService.recordMovieProgress(this.currentProfile.id, this.movie.id, this.watchTime).subscribe();\n    }\n  }\n  \n  updateWatchProgress(completed: boolean = false): void {\n    if (!this.currentProfile || !this.movie || this.watchTime === 0) {\n      return;\n    }\n    \n    this.userService.updateWatchHistory(\n      this.currentProfile.id,\n      this.movie.id,\n      this.watchTime,\n      completed || this.isCompleted\n    ).subscribe(\n      () => {\n        console.log(\'Watch progress updated\');\n      },\n      error => {\n        console.error(\'Error updating watch progress:\', error);\n      }\n    );\n  }\n  \n  goBack(): void {\n    this.router.navigate([\'/movie\', this.movie?.id || \'\']);\n  }\n  \n  getVideoUrl(): string {\n    return this.movie?.video_url || \'\';\n  }\n  \n  getPosterUrl(): string {\n    return this.movie?.poster_url || \'\';\n  }\n}\n</create-file>\n</function_calls>'}