{'role': 'assistant', 'content': 'Let\'s create the theme service for handling dark mode:\n\n<function_calls>\n<create-file file_path="angocine/frontend/angocine/src/app/services/theme.service.ts">\nimport { Injectable, Renderer2, RendererFactory2 } from \'@angular/core\';\nimport { BehaviorSubject, Observable } from \'rxjs\';\n\n@Injectable({\n  providedIn: \'root\'\n})\nexport class ThemeService {\n  private renderer: Renderer2;\n  private darkModeSubject: BehaviorSubject<boolean>;\n  public darkMode$: Observable<boolean>;\n  \n  constructor(rendererFactory: RendererFactory2) {\n    this.renderer = rendererFactory.createRenderer(null, null);\n    this.darkModeSubject = new BehaviorSubject<boolean>(this.getInitialDarkModeState());\n    this.darkMode$ = this.darkModeSubject.asObservable();\n    \n    // Apply initial theme\n    this.applyTheme(this.darkModeSubject.value);\n    \n    // Listen for system preference changes\n    this.listenForSystemPreferenceChanges();\n  }\n  \n  // Toggle dark mode\n  toggleDarkMode(): void {\n    const newState = !this.darkModeSubject.value;\n    this.setDarkMode(newState);\n  }\n  \n  // Set dark mode state\n  setDarkMode(isDarkMode: boolean): void {\n    localStorage.setItem(\'darkMode\', isDarkMode ? \'true\' : \'false\');\n    this.darkModeSubject.next(isDarkMode);\n    this.applyTheme(isDarkMode);\n  }\n  \n  // Get current dark mode state\n  isDarkMode(): boolean {\n    return this.darkModeSubject.value;\n  }\n  \n  // Private helper methods\n  private getInitialDarkModeState(): boolean {\n    // Check local storage first\n    const storedPreference = localStorage.getItem(\'darkMode\');\n    if (storedPreference !== null) {\n      return storedPreference === \'true\';\n    }\n    \n    // Otherwise use system preference\n    return window.matchMedia && window.matchMedia(\'(prefers-color-scheme: dark)\').matches;\n  }\n  \n  private applyTheme(isDarkMode: boolean): void {\n    if (isDarkMode) {\n      document.documentElement.classList.add(\'dark-theme\');\n      document.documentElement.classList.remove(\'light-theme\');\n      this.renderer.setAttribute(document.documentElement, \'data-bs-theme\', \'dark\');\n    } else {\n      document.documentElement.classList.add(\'light-theme\');\n      document.documentElement.classList.remove(\'dark-theme\');\n      this.renderer.setAttribute(document.documentElement, \'data-bs-theme\', \'light\');\n    }\n  }\n  \n  private listenForSystemPreferenceChanges(): void {\n    if (window.matchMedia) {\n      const mediaQuery = window.matchMedia(\'(prefers-color-scheme: dark)\');\n      \n      // Modern browsers\n      if (mediaQuery.addEventListener) {\n        mediaQuery.addEventListener(\'change\', (e) => {\n          // Only update if user hasn\'t set a preference\n          if (localStorage.getItem(\'darkMode\') === null) {\n            this.setDarkMode(e.matches);\n          }\n        });\n      } \n      // Safari and older browsers\n      else if (mediaQuery.addListener) {\n        mediaQuery.addListener((e) => {\n          // Only update if user hasn\'t set a preference\n          if (localStorage.getItem(\'darkMode\') === null) {\n            this.setDarkMode(e.matches);\n          }\n        });\n      }\n    }\n  }\n}\n</create-file>\n</function_calls>'}