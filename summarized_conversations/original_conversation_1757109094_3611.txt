{'role': 'assistant', 'content': 'Now let\'s create the analytics routes:\n\n<function_calls>\n<create-file file_path="angocine/backend/src/routes/analytics.routes.js">\nconst express = require(\'express\');\nconst router = express.Router();\nconst db = require(\'../db\');\n\n// Record analytics event\nrouter.post(\'/event\', async (req, res) => {\n  try {\n    const { profile_id, movie_id, event_type, event_data } = req.body;\n    \n    // Validate required fields\n    if (!profile_id || !event_type) {\n      return res.status(400).json({ error: true, message: \'Profile ID and event type are required\' });\n    }\n    \n    // Check if profile exists\n    const profiles = await db.query(\'SELECT * FROM profiles WHERE id = ?\', [profile_id]);\n    \n    if (profiles.length === 0) {\n      return res.status(404).json({ error: true, message: \'Profile not found\' });\n    }\n    \n    // Check if movie exists (if provided)\n    if (movie_id) {\n      const movies = await db.query(\'SELECT * FROM movies WHERE id = ?\', [movie_id]);\n      \n      if (movies.length === 0) {\n        return res.status(404).json({ error: true, message: \'Movie not found\' });\n      }\n    }\n    \n    // Record event\n    await db.query(`\n      INSERT INTO analytics_events (profile_id, movie_id, event_type, event_data)\n      VALUES (?, ?, ?, ?)\n    `, [\n      profile_id, \n      movie_id || null, \n      event_type,\n      event_data ? JSON.stringify(event_data) : null\n    ]);\n    \n    res.status(201).json({\n      error: false,\n      message: \'Event recorded successfully\'\n    });\n  } catch (err) {\n    console.error(\'Error recording analytics event:\', err);\n    res.status(500).json({ error: true, message: \'Server error while recording event\' });\n  }\n});\n\n// Get user activity for a profile\nrouter.get(\'/activity/:profileId\', async (req, res) => {\n  try {\n    const { profileId } = req.params;\n    const userId = req.user.id;\n    \n    // Check if profile belongs to user\n    const profiles = await db.query(\n      \'SELECT * FROM profiles WHERE id = ? AND user_id = ?\',\n      [profileId, userId]\n    );\n    \n    if (profiles.length === 0) {\n      return res.status(404).json({ error: true, message: \'Profile not found or access denied\' });\n    }\n    \n    // Get recent activity\n    const activity = await db.query(`\n      SELECT \n        ae.event_type, ae.event_data, ae.created_at,\n        m.id as movie_id, m.title as movie_title, m.poster_url\n      FROM analytics_events ae\n      LEFT JOIN movies m ON ae.movie_id = m.id\n      WHERE ae.profile_id = ?\n      ORDER BY ae.created_at DESC\n      LIMIT 20\n    `, [profileId]);\n    \n    // Format activity data\n    const formattedActivity = activity.map(item => {\n      let description = \'\';\n      let eventData = null;\n      \n      try {\n        if (item.event_data) {\n          eventData = JSON.parse(item.event_data);\n        }\n      } catch (e) {\n        console.error(\'Error parsing event data:\', e);\n      }\n      \n      switch (item.event_type) {\n        case \'movie_started\':\n          description = `Started watching "${item.movie_title}"`;\n          break;\n        case \'movie_progress\':\n          description = `Continued watching "${item.movie_title}"`;\n          break;\n        case \'movie_completed\':\n          description = `Finished watching "${item.movie_title}"`;\n          break;\n        case \'movie_rated\':\n          description = `Rated "${item.movie_title}" ${eventData?.rating || \'\'} stars`;\n          break;\n        case \'movie_added_to_watchlist\':\n          description = `Added "${item.movie_title}" to watchlist`;\n          break;\n        case \'movie_removed_from_watchlist\':\n          description = `Removed "${item.movie_title}" from watchlist`;\n          break;\n        case \'profile_created\':\n          description = \'Profile was created\';\n          break;\n        case \'profile_updated\':\n          description = \'Profile was updated\';\n          break;\n        case \'search\':\n          description = `Searched for "${eventData?.query || \'something\'}"`;\n          break;\n        default:\n          description = `${item.event_type.replace(/_/g, \' \')}`;\n      }\n      \n      return {\n        id: item.id,\n        description,\n        event_type: item.event_type,\n        movie: item.movie_id ? {\n          id: item.movie_id,\n          title: item.movie_title,\n          poster_url: item.poster_url\n        } : null,\n        created_at: item.created_at\n      };\n    });\n    \n    res.status(200).json({\n      error: false,\n      data: { activity: formattedActivity }\n    });\n  } catch (err) {\n    console.error(\'Error fetching activity:\', err);\n    res.status(500).json({ error: true, message: \'Server error while fetching activity\' });\n  }\n});\n\n// Get watch time statistics for a profile\nrouter.get(\'/watch-time/:profileId\', async (req, res) => {\n  try {\n    const { profileId } = req.params;\n    const userId = req.user.id;\n    \n    // Check if profile belongs to user\n    const profiles = await db.query(\n      \'SELECT * FROM profiles WHERE id = ? AND user_id = ?\',\n      [profileId, userId]\n    );\n    \n    if (profiles.length === 0) {\n      return res.status(404).json({ error: true, message: \'Profile not found or access denied\' });\n    }\n    \n    // Get total watch time\n    const totalWatchTimeResult = await db.query(`\n      SELECT SUM(watch_time) as total_seconds\n      FROM watch_history\n      WHERE profile_id = ?\n    `, [profileId]);\n    \n    const totalSeconds = totalWatchTimeResult[0].total_seconds || 0;\n    \n    // Get watch time by genre\n    const watchTimeByGenre = await db.query(`\n      SELECT m.genre, SUM(h.watch_time) as total_seconds\n      FROM watch_history h\n      JOIN movies m ON h.movie_id = m.id\n      WHERE h.profile_id = ?\n      GROUP BY m.genre\n      ORDER BY total_seconds DESC\n    `, [profileId]);\n    \n    // Process genre data (split comma-separated genres)\n    const genreMap = new Map();\n    \n    watchTimeByGenre.forEach(item => {\n      if (item.genre) {\n        const genres = item.genre.split(\',\').map(g => g.trim());\n        const secondsPerGenre = item.total_seconds / genres.length;\n        \n        genres.forEach(genre => {\n          if (genreMap.has(genre)) {\n            genreMap.set(genre, genreMap.get(genre) + secondsPerGenre);\n          } else {\n            genreMap.set(genre, secondsPerGenre);\n          }\n        });\n      }\n    });\n    \n    const processedGenres = Array.from(genreMap.entries()).map(([genre, seconds]) => ({\n      genre,\n      total_seconds: Math.round(seconds),\n      hours: Math.floor(seconds / 3600),\n      percentage: Math.round((seconds / totalSeconds) * 100)\n    })).sort((a, b) => b.total_seconds - a.total_seconds);\n    \n    // Format total watch time\n    const hours = Math.floor(totalSeconds / 3600);\n    const minutes = Math.floor((totalSeconds % 3600) / 60);\n    \n    res.status(200).json({\n      error: false,\n      data: {\n        total_watch_time: {\n          seconds: totalSeconds,\n          hours,\n          minutes,\n          formatted: `${hours}h ${minutes}m`\n        },\n        watch_time_by_genre: processedGenres\n      }\n    });\n  } catch (err) {\n    console.error(\'Error fetching watch time statistics:\', err);\n    res.status(500).json({ error: true, message: \'Server error while fetching watch time statistics\' });\n  }\n});\n\nmodule.exports = router;\n</create-file>\n</function_calls>'}