{'role': 'assistant', 'content': 'Now let\'s create the auth guard for protecting routes:\n\n<function_calls>\n<create-file file_path="angocine/frontend/angocine/src/app/guards/auth.guard.ts">\nimport { Injectable } from \'@angular/core\';\nimport { Router, ActivatedRouteSnapshot, RouterStateSnapshot, UrlTree } from \'@angular/router\';\nimport { Observable } from \'rxjs\';\nimport { AuthService } from \'../services/auth.service\';\n\n@Injectable({\n  providedIn: \'root\'\n})\nexport class AuthGuard {\n  constructor(\n    private router: Router,\n    private authService: AuthService\n  ) {}\n\n  canActivate(\n    route: ActivatedRouteSnapshot,\n    state: RouterStateSnapshot\n  ): Observable<boolean | UrlTree> | Promise<boolean | UrlTree> | boolean | UrlTree {\n    if (this.authService.isLoggedIn()) {\n      // Check if route requires admin role\n      if (route.data[\'requiresAdmin\'] && !this.authService.isAdmin()) {\n        // Redirect to home if user is not admin\n        return this.router.createUrlTree([\'/\']);\n      }\n      \n      // Check if profile selection is required\n      if (route.data[\'requiresProfile\'] && !this.authService.currentProfileValue) {\n        // Redirect to profile selection\n        return this.router.createUrlTree([\'/profile/select\']);\n      }\n      \n      return true;\n    }\n\n    // Not logged in, redirect to login page with return url\n    return this.router.createUrlTree([\'/auth/login\'], { queryParams: { returnUrl: state.url } });\n  }\n}\n</create-file>\n</function_calls>'}