{'role': 'assistant', 'content': 'Now let\'s create a basic test file for our backend API:\n\n<function_calls>\n<create-file file_path="angocine/backend/tests/api.test.js">\nconst request = require(\'supertest\');\nconst app = require(\'../src/app\');\nconst db = require(\'../src/db\');\n\n// Mock database functions\njest.mock(\'../src/db\', () => ({\n  query: jest.fn(),\n  USE_SQLITE: true,\n  initializeDatabase: jest.fn().mockResolvedValue(true)\n}));\n\ndescribe(\'API Endpoints\', () => {\n  beforeEach(() => {\n    jest.clearAllMocks();\n  });\n\n  describe(\'Health Check\', () => {\n    it(\'should return 200 OK with status message\', async () => {\n      const response = await request(app).get(\'/health\');\n      expect(response.status).toBe(200);\n      expect(response.body).toHaveProperty(\'status\', \'ok\');\n      expect(response.body).toHaveProperty(\'message\', \'AngoCine API is running\');\n    });\n  });\n\n  describe(\'Authentication\', () => {\n    it(\'should register a new user\', async () => {\n      // Mock database responses\n      db.query\n        .mockResolvedValueOnce([]) // No existing users\n        .mockResolvedValueOnce([{ id: 1 }]) // User creation result\n        .mockResolvedValueOnce([]); // Profile creation result\n\n      const response = await request(app)\n        .post(\'/api/auth/register\')\n        .send({\n          username: \'testuser\',\n          email: \'test@example.com\',\n          password: \'password123\'\n        });\n\n      expect(response.status).toBe(201);\n      expect(response.body).toHaveProperty(\'error\', false);\n      expect(response.body).toHaveProperty(\'message\', \'User registered successfully\');\n      expect(response.body.data).toHaveProperty(\'token\');\n      expect(response.body.data).toHaveProperty(\'refreshToken\');\n      expect(response.body.data.user).toHaveProperty(\'username\', \'testuser\');\n    });\n\n    it(\'should login a user\', async () => {\n      // Mock database responses for login\n      const mockUser = {\n        id: 1,\n        username: \'testuser\',\n        email: \'test@example.com\',\n        password: \'$2a$10$XOPbrlUPQdwdJUpSrIF6X.LbE14qsMmKGq4V9//8iBFZPxFJkjPJO\', // hashed \'password123\'\n        role: \'user\'\n      };\n      \n      db.query\n        .mockResolvedValueOnce([mockUser]) // Find user\n        .mockResolvedValueOnce([]); // Get profiles\n\n      const response = await request(app)\n        .post(\'/api/auth/login\')\n        .send({\n          email: \'test@example.com\',\n          password: \'password123\'\n        });\n\n      expect(response.status).toBe(200);\n      expect(response.body).toHaveProperty(\'error\', false);\n      expect(response.body).toHaveProperty(\'message\', \'Login successful\');\n      expect(response.body.data).toHaveProperty(\'token\');\n      expect(response.body.data).toHaveProperty(\'refreshToken\');\n    });\n  });\n\n  describe(\'Movies\', () => {\n    it(\'should get a list of movies\', async () => {\n      // Mock database responses\n      db.query\n        .mockResolvedValueOnce([{ total: 20 }]) // Count result\n        .mockResolvedValueOnce([\n          {\n            id: 1,\n            title: \'Test Movie\',\n            release_year: 2024,\n            genre: \'Action\',\n            rating: 8.5\n          }\n        ]); // Movies result\n\n      const response = await request(app).get(\'/api/movies\');\n\n      expect(response.status).toBe(200);\n      expect(response.body).toHaveProperty(\'error\', false);\n      expect(response.body.data).toHaveProperty(\'movies\');\n      expect(response.body.data.movies).toBeInstanceOf(Array);\n      expect(response.body.data).toHaveProperty(\'pagination\');\n    });\n\n    it(\'should get movie details\', async () => {\n      // Mock database responses\n      const mockMovie = {\n        id: 1,\n        title: \'Test Movie\',\n        description: \'A test movie description\',\n        release_year: 2024,\n        genre: \'Action\',\n        rating: 8.5\n      };\n      \n      db.query\n        .mockResolvedValueOnce([mockMovie]) // Movie details\n        .mockResolvedValueOnce([]) // Reviews\n        .mockResolvedValueOnce([{ average_rating: 8.5, total_reviews: 10 }]) // Rating stats\n        .mockResolvedValueOnce([]); // Similar movies\n\n      const response = await request(app).get(\'/api/movies/1\');\n\n      expect(response.status).toBe(200);\n      expect(response.body).toHaveProperty(\'error\', false);\n      expect(response.body.data).toHaveProperty(\'movie\');\n      expect(response.body.data).toHaveProperty(\'reviews\');\n      expect(response.body.data).toHaveProperty(\'ratings\');\n      expect(response.body.data).toHaveProperty(\'similar_movies\');\n    });\n  });\n});\n</create-file>\n</function_calls>'}